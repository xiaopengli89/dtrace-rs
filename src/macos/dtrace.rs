/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &[u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &[u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &[u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const CPU_STATE_MAX: u32 = 4;
pub const CPU_STATE_USER: u32 = 0;
pub const CPU_STATE_SYSTEM: u32 = 1;
pub const CPU_STATE_IDLE: u32 = 2;
pub const CPU_STATE_NICE: u32 = 3;
pub const CPU_ARCH_MASK: u32 = 4278190080;
pub const CPU_ARCH_ABI64: u32 = 16777216;
pub const CPU_ARCH_ABI64_32: u32 = 33554432;
pub const CPU_SUBTYPE_MASK: u32 = 4278190080;
pub const CPU_SUBTYPE_LIB64: u32 = 2147483648;
pub const CPU_SUBTYPE_PTRAUTH_ABI: u32 = 2147483648;
pub const CPU_SUBTYPE_INTEL_FAMILY_MAX: u32 = 15;
pub const CPU_SUBTYPE_INTEL_MODEL_ALL: u32 = 0;
pub const CPU_SUBTYPE_ARM64_PTR_AUTH_MASK: u32 = 251658240;
pub const CPUFAMILY_UNKNOWN: u32 = 0;
pub const CPUFAMILY_POWERPC_G3: u32 = 3471054153;
pub const CPUFAMILY_POWERPC_G4: u32 = 2009171118;
pub const CPUFAMILY_POWERPC_G5: u32 = 3983988906;
pub const CPUFAMILY_INTEL_6_13: u32 = 2855483691;
pub const CPUFAMILY_INTEL_PENRYN: u32 = 2028621756;
pub const CPUFAMILY_INTEL_NEHALEM: u32 = 1801080018;
pub const CPUFAMILY_INTEL_WESTMERE: u32 = 1463508716;
pub const CPUFAMILY_INTEL_SANDYBRIDGE: u32 = 1418770316;
pub const CPUFAMILY_INTEL_IVYBRIDGE: u32 = 526772277;
pub const CPUFAMILY_INTEL_HASWELL: u32 = 280134364;
pub const CPUFAMILY_INTEL_BROADWELL: u32 = 1479463068;
pub const CPUFAMILY_INTEL_SKYLAKE: u32 = 939270559;
pub const CPUFAMILY_INTEL_KABYLAKE: u32 = 260141638;
pub const CPUFAMILY_INTEL_ICELAKE: u32 = 943936839;
pub const CPUFAMILY_INTEL_COMETLAKE: u32 = 486055998;
pub const CPUFAMILY_ARM_9: u32 = 3878847406;
pub const CPUFAMILY_ARM_11: u32 = 2415272152;
pub const CPUFAMILY_ARM_XSCALE: u32 = 1404044789;
pub const CPUFAMILY_ARM_12: u32 = 3172666089;
pub const CPUFAMILY_ARM_13: u32 = 214503012;
pub const CPUFAMILY_ARM_14: u32 = 2517073649;
pub const CPUFAMILY_ARM_15: u32 = 2823887818;
pub const CPUFAMILY_ARM_SWIFT: u32 = 506291073;
pub const CPUFAMILY_ARM_CYCLONE: u32 = 933271106;
pub const CPUFAMILY_ARM_TYPHOON: u32 = 747742334;
pub const CPUFAMILY_ARM_TWISTER: u32 = 2465937352;
pub const CPUFAMILY_ARM_HURRICANE: u32 = 1741614739;
pub const CPUFAMILY_ARM_MONSOON_MISTRAL: u32 = 3894312694;
pub const CPUFAMILY_ARM_VORTEX_TEMPEST: u32 = 131287967;
pub const CPUFAMILY_ARM_LIGHTNING_THUNDER: u32 = 1176831186;
pub const CPUFAMILY_ARM_FIRESTORM_ICESTORM: u32 = 458787763;
pub const CPUFAMILY_ARM_BLIZZARD_AVALANCHE: u32 = 3660830781;
pub const CPUFAMILY_ARM_EVEREST_SAWTOOTH: u32 = 2271604202;
pub const CPUSUBFAMILY_UNKNOWN: u32 = 0;
pub const CPUSUBFAMILY_ARM_HP: u32 = 1;
pub const CPUSUBFAMILY_ARM_HG: u32 = 2;
pub const CPUSUBFAMILY_ARM_M: u32 = 3;
pub const CPUSUBFAMILY_ARM_HS: u32 = 4;
pub const CPUSUBFAMILY_ARM_HC_HD: u32 = 5;
pub const CPUFAMILY_INTEL_6_23: u32 = 2028621756;
pub const CPUFAMILY_INTEL_6_26: u32 = 1801080018;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 130100;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const BSD: u32 = 199506;
pub const BSD4_3: u32 = 1;
pub const BSD4_4: u32 = 1;
pub const NeXTBSD: u32 = 1995064;
pub const NeXTBSD4_0: u32 = 0;
pub const ARG_MAX: u32 = 1048576;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const MAXCOMLEN: u32 = 16;
pub const MAXINTERP: u32 = 64;
pub const MAXLOGNAME: u32 = 255;
pub const MAXUPRC: u32 = 266;
pub const NCARGS: u32 = 1048576;
pub const NGROUPS: u32 = 16;
pub const NOFILE: u32 = 256;
pub const NOGROUP: u32 = 65535;
pub const MAXHOSTNAMELEN: u32 = 256;
pub const MAXDOMNAMELEN: u32 = 256;
pub const NBPG: u32 = 4096;
pub const PGOFSET: u32 = 4095;
pub const PGSHIFT: u32 = 12;
pub const DEV_BSIZE: u32 = 512;
pub const DEV_BSHIFT: u32 = 9;
pub const BLKDEV_IOSIZE: u32 = 2048;
pub const MAXPHYS: u32 = 131072;
pub const CLSIZE: u32 = 1;
pub const CLSIZELOG2: u32 = 0;
pub const MSIZESHIFT: u32 = 8;
pub const MSIZE: u32 = 256;
pub const MCLSHIFT: u32 = 11;
pub const MCLBYTES: u32 = 2048;
pub const MBIGCLSHIFT: u32 = 12;
pub const MBIGCLBYTES: u32 = 4096;
pub const M16KCLSHIFT: u32 = 14;
pub const M16KCLBYTES: u32 = 16384;
pub const MCLOFSET: u32 = 2047;
pub const NMBCLUSTERS: u32 = 512;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 8192;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _I386_SIGNAL_H_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const FP_PREC_24B: u32 = 0;
pub const FP_PREC_53B: u32 = 2;
pub const FP_PREC_64B: u32 = 3;
pub const FP_RND_NEAR: u32 = 0;
pub const FP_RND_DOWN: u32 = 1;
pub const FP_RND_UP: u32 = 2;
pub const FP_CHOP: u32 = 3;
pub const FP_STATE_BYTES: u32 = 512;
pub const _X86_INSTRUCTION_STATE_MAX_INSN_BYTES: u32 = 2380;
pub const _X86_INSTRUCTION_STATE_CACHELINE_SIZE: u32 = 64;
pub const __LASTBRANCH_MAX: u32 = 32;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const PSWP: u32 = 0;
pub const PVM: u32 = 4;
pub const PINOD: u32 = 8;
pub const PRIBIO: u32 = 16;
pub const PVFS: u32 = 20;
pub const PZERO: u32 = 22;
pub const PSOCK: u32 = 24;
pub const PWAIT: u32 = 32;
pub const PLOCK: u32 = 36;
pub const PPAUSE: u32 = 40;
pub const PUSER: u32 = 50;
pub const MAXPRI: u32 = 127;
pub const PRIMASK: u32 = 255;
pub const PCATCH: u32 = 256;
pub const PTTYBLOCK: u32 = 512;
pub const PDROP: u32 = 1024;
pub const PSPIN: u32 = 2048;
pub const CMASK: u32 = 18;
pub const CLBYTES: u32 = 4096;
pub const CLOFSET: u32 = 4095;
pub const CLOFF: u32 = 4095;
pub const CLSHIFT: u32 = 12;
pub const CBLOCK: u32 = 64;
pub const CBQSIZE: u32 = 8;
pub const CROUND: u32 = 63;
pub const MAXBSIZE: u32 = 1048576;
pub const MAXPHYSIO: u32 = 131072;
pub const MAXFRAG: u32 = 8;
pub const MAXPHYSIO_WIRED: u32 = 16777216;
pub const MAXPATHLEN: u32 = 1024;
pub const MAXSYMLINKS: u32 = 32;
pub const FSHIFT: u32 = 11;
pub const FSCALE: u32 = 2048;
pub const SEC: u32 = 1;
pub const MILLISEC: u32 = 1000;
pub const MICROSEC: u32 = 1000000;
pub const NANOSEC: u32 = 1000000000;
pub const CTF_MODEL_ILP32: u32 = 1;
pub const CTF_MODEL_LP64: u32 = 2;
pub const CTF_MODEL_NATIVE: u32 = 2;
pub const IOCPARM_MASK: u32 = 8191;
pub const IOCPARM_MAX: u32 = 8192;
pub const TIOCM_LE: u32 = 1;
pub const TIOCM_DTR: u32 = 2;
pub const TIOCM_RTS: u32 = 4;
pub const TIOCM_ST: u32 = 8;
pub const TIOCM_SR: u32 = 16;
pub const TIOCM_CTS: u32 = 32;
pub const TIOCM_CAR: u32 = 64;
pub const TIOCM_CD: u32 = 64;
pub const TIOCM_RNG: u32 = 128;
pub const TIOCM_RI: u32 = 128;
pub const TIOCM_DSR: u32 = 256;
pub const TIOCPKT_DATA: u32 = 0;
pub const TIOCPKT_FLUSHREAD: u32 = 1;
pub const TIOCPKT_FLUSHWRITE: u32 = 2;
pub const TIOCPKT_STOP: u32 = 4;
pub const TIOCPKT_START: u32 = 8;
pub const TIOCPKT_NOSTOP: u32 = 16;
pub const TIOCPKT_DOSTOP: u32 = 32;
pub const TIOCPKT_IOCTL: u32 = 64;
pub const TTYDISC: u32 = 0;
pub const TABLDISC: u32 = 3;
pub const SLIPDISC: u32 = 4;
pub const PPPDISC: u32 = 5;
pub const __GNUC_VA_LIST: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const DTRACE_CPUALL: i32 = -1;
pub const DTRACE_IDNONE: u32 = 0;
pub const DTRACE_EPIDNONE: u32 = 0;
pub const DTRACE_AGGIDNONE: u32 = 0;
pub const DTRACE_AGGVARIDNONE: u32 = 0;
pub const DTRACE_CACHEIDNONE: u32 = 0;
pub const DTRACE_PROVNONE: u32 = 0;
pub const DTRACE_METAPROVNONE: u32 = 0;
pub const DTRACE_ARGNONE: i32 = -1;
pub const DTRACE_PROVNAMELEN: u32 = 64;
pub const DTRACE_MODNAMELEN: u32 = 64;
pub const DTRACE_FUNCNAMELEN: u32 = 128;
pub const DTRACE_NAMELEN: u32 = 64;
pub const DTRACE_FULLNAMELEN: u32 = 324;
pub const DTRACE_ARGTYPELEN: u32 = 128;
pub const DIF_VERSION_1: u32 = 1;
pub const DIF_VERSION_2: u32 = 2;
pub const DIF_VERSION: u32 = 2;
pub const DIF_DIR_NREGS: u32 = 8;
pub const DIF_DTR_NREGS: u32 = 8;
pub const DIF_OP_OR: u32 = 1;
pub const DIF_OP_XOR: u32 = 2;
pub const DIF_OP_AND: u32 = 3;
pub const DIF_OP_SLL: u32 = 4;
pub const DIF_OP_SRL: u32 = 5;
pub const DIF_OP_SUB: u32 = 6;
pub const DIF_OP_ADD: u32 = 7;
pub const DIF_OP_MUL: u32 = 8;
pub const DIF_OP_SDIV: u32 = 9;
pub const DIF_OP_UDIV: u32 = 10;
pub const DIF_OP_SREM: u32 = 11;
pub const DIF_OP_UREM: u32 = 12;
pub const DIF_OP_NOT: u32 = 13;
pub const DIF_OP_MOV: u32 = 14;
pub const DIF_OP_CMP: u32 = 15;
pub const DIF_OP_TST: u32 = 16;
pub const DIF_OP_BA: u32 = 17;
pub const DIF_OP_BE: u32 = 18;
pub const DIF_OP_BNE: u32 = 19;
pub const DIF_OP_BG: u32 = 20;
pub const DIF_OP_BGU: u32 = 21;
pub const DIF_OP_BGE: u32 = 22;
pub const DIF_OP_BGEU: u32 = 23;
pub const DIF_OP_BL: u32 = 24;
pub const DIF_OP_BLU: u32 = 25;
pub const DIF_OP_BLE: u32 = 26;
pub const DIF_OP_BLEU: u32 = 27;
pub const DIF_OP_LDSB: u32 = 28;
pub const DIF_OP_LDSH: u32 = 29;
pub const DIF_OP_LDSW: u32 = 30;
pub const DIF_OP_LDUB: u32 = 31;
pub const DIF_OP_LDUH: u32 = 32;
pub const DIF_OP_LDUW: u32 = 33;
pub const DIF_OP_LDX: u32 = 34;
pub const DIF_OP_RET: u32 = 35;
pub const DIF_OP_NOP: u32 = 36;
pub const DIF_OP_SETX: u32 = 37;
pub const DIF_OP_SETS: u32 = 38;
pub const DIF_OP_SCMP: u32 = 39;
pub const DIF_OP_LDGA: u32 = 40;
pub const DIF_OP_LDGS: u32 = 41;
pub const DIF_OP_STGS: u32 = 42;
pub const DIF_OP_LDTA: u32 = 43;
pub const DIF_OP_LDTS: u32 = 44;
pub const DIF_OP_STTS: u32 = 45;
pub const DIF_OP_SRA: u32 = 46;
pub const DIF_OP_CALL: u32 = 47;
pub const DIF_OP_PUSHTR: u32 = 48;
pub const DIF_OP_PUSHTV: u32 = 49;
pub const DIF_OP_POPTS: u32 = 50;
pub const DIF_OP_FLUSHTS: u32 = 51;
pub const DIF_OP_LDGAA: u32 = 52;
pub const DIF_OP_LDTAA: u32 = 53;
pub const DIF_OP_STGAA: u32 = 54;
pub const DIF_OP_STTAA: u32 = 55;
pub const DIF_OP_LDLS: u32 = 56;
pub const DIF_OP_STLS: u32 = 57;
pub const DIF_OP_ALLOCS: u32 = 58;
pub const DIF_OP_COPYS: u32 = 59;
pub const DIF_OP_STB: u32 = 60;
pub const DIF_OP_STH: u32 = 61;
pub const DIF_OP_STW: u32 = 62;
pub const DIF_OP_STX: u32 = 63;
pub const DIF_OP_ULDSB: u32 = 64;
pub const DIF_OP_ULDSH: u32 = 65;
pub const DIF_OP_ULDSW: u32 = 66;
pub const DIF_OP_ULDUB: u32 = 67;
pub const DIF_OP_ULDUH: u32 = 68;
pub const DIF_OP_ULDUW: u32 = 69;
pub const DIF_OP_ULDX: u32 = 70;
pub const DIF_OP_RLDSB: u32 = 71;
pub const DIF_OP_RLDSH: u32 = 72;
pub const DIF_OP_RLDSW: u32 = 73;
pub const DIF_OP_RLDUB: u32 = 74;
pub const DIF_OP_RLDUH: u32 = 75;
pub const DIF_OP_RLDUW: u32 = 76;
pub const DIF_OP_RLDX: u32 = 77;
pub const DIF_OP_XLATE: u32 = 78;
pub const DIF_OP_XLARG: u32 = 79;
pub const DIF_OP_STRIP: u32 = 80;
pub const DIF_INTOFF_MAX: u32 = 65535;
pub const DIF_STROFF_MAX: u32 = 65535;
pub const DIF_REGISTER_MAX: u32 = 255;
pub const DIF_VARIABLE_MAX: u32 = 65535;
pub const DIF_SUBROUTINE_MAX: u32 = 65535;
pub const DIF_VAR_ARRAY_MIN: u32 = 0;
pub const DIF_VAR_ARRAY_UBASE: u32 = 128;
pub const DIF_VAR_ARRAY_MAX: u32 = 255;
pub const DIF_VAR_OTHER_MIN: u32 = 256;
pub const DIF_VAR_OTHER_UBASE: u32 = 1280;
pub const DIF_VAR_OTHER_MAX: u32 = 65535;
pub const DIF_VAR_ARGS: u32 = 0;
pub const DIF_VAR_REGS: u32 = 1;
pub const DIF_VAR_UREGS: u32 = 2;
pub const DIF_VAR_VMREGS: u32 = 3;
pub const DIF_VAR_CURTHREAD: u32 = 256;
pub const DIF_VAR_TIMESTAMP: u32 = 257;
pub const DIF_VAR_VTIMESTAMP: u32 = 258;
pub const DIF_VAR_IPL: u32 = 259;
pub const DIF_VAR_EPID: u32 = 260;
pub const DIF_VAR_ID: u32 = 261;
pub const DIF_VAR_ARG0: u32 = 262;
pub const DIF_VAR_ARG1: u32 = 263;
pub const DIF_VAR_ARG2: u32 = 264;
pub const DIF_VAR_ARG3: u32 = 265;
pub const DIF_VAR_ARG4: u32 = 266;
pub const DIF_VAR_ARG5: u32 = 267;
pub const DIF_VAR_ARG6: u32 = 268;
pub const DIF_VAR_ARG7: u32 = 269;
pub const DIF_VAR_ARG8: u32 = 270;
pub const DIF_VAR_ARG9: u32 = 271;
pub const DIF_VAR_STACKDEPTH: u32 = 272;
pub const DIF_VAR_CALLER: u32 = 273;
pub const DIF_VAR_PROBEPROV: u32 = 274;
pub const DIF_VAR_PROBEMOD: u32 = 275;
pub const DIF_VAR_PROBEFUNC: u32 = 276;
pub const DIF_VAR_PROBENAME: u32 = 277;
pub const DIF_VAR_PID: u32 = 278;
pub const DIF_VAR_TID: u32 = 279;
pub const DIF_VAR_EXECNAME: u32 = 280;
pub const DIF_VAR_ZONENAME: u32 = 281;
pub const DIF_VAR_WALLTIMESTAMP: u32 = 282;
pub const DIF_VAR_USTACKDEPTH: u32 = 283;
pub const DIF_VAR_UCALLER: u32 = 284;
pub const DIF_VAR_PPID: u32 = 285;
pub const DIF_VAR_UID: u32 = 286;
pub const DIF_VAR_GID: u32 = 287;
pub const DIF_VAR_ERRNO: u32 = 288;
pub const DIF_VAR_PTHREAD_SELF: u32 = 512;
pub const DIF_VAR_DISPATCHQADDR: u32 = 513;
pub const DIF_VAR_MACHTIMESTAMP: u32 = 514;
pub const DIF_VAR_CPU: u32 = 515;
pub const DIF_VAR_CPUINSTRS: u32 = 516;
pub const DIF_VAR_CPUCYCLES: u32 = 517;
pub const DIF_VAR_VINSTRS: u32 = 518;
pub const DIF_VAR_VCYCLES: u32 = 519;
pub const DIF_VAR_MACHCTIMESTAMP: u32 = 520;
pub const DIF_SUBR_RAND: u32 = 0;
pub const DIF_SUBR_MUTEX_OWNED: u32 = 1;
pub const DIF_SUBR_MUTEX_OWNER: u32 = 2;
pub const DIF_SUBR_MUTEX_TYPE_ADAPTIVE: u32 = 3;
pub const DIF_SUBR_MUTEX_TYPE_SPIN: u32 = 4;
pub const DIF_SUBR_RW_READ_HELD: u32 = 5;
pub const DIF_SUBR_RW_WRITE_HELD: u32 = 6;
pub const DIF_SUBR_RW_ISWRITER: u32 = 7;
pub const DIF_SUBR_COPYIN: u32 = 8;
pub const DIF_SUBR_COPYINSTR: u32 = 9;
pub const DIF_SUBR_SPECULATION: u32 = 10;
pub const DIF_SUBR_PROGENYOF: u32 = 11;
pub const DIF_SUBR_STRLEN: u32 = 12;
pub const DIF_SUBR_COPYOUT: u32 = 13;
pub const DIF_SUBR_COPYOUTSTR: u32 = 14;
pub const DIF_SUBR_ALLOCA: u32 = 15;
pub const DIF_SUBR_BCOPY: u32 = 16;
pub const DIF_SUBR_COPYINTO: u32 = 17;
pub const DIF_SUBR_MSGDSIZE: u32 = 18;
pub const DIF_SUBR_MSGSIZE: u32 = 19;
pub const DIF_SUBR_GETMAJOR: u32 = 20;
pub const DIF_SUBR_GETMINOR: u32 = 21;
pub const DIF_SUBR_DDI_PATHNAME: u32 = 22;
pub const DIF_SUBR_STRJOIN: u32 = 23;
pub const DIF_SUBR_LLTOSTR: u32 = 24;
pub const DIF_SUBR_BASENAME: u32 = 25;
pub const DIF_SUBR_DIRNAME: u32 = 26;
pub const DIF_SUBR_CLEANPATH: u32 = 27;
pub const DIF_SUBR_STRCHR: u32 = 28;
pub const DIF_SUBR_STRRCHR: u32 = 29;
pub const DIF_SUBR_STRSTR: u32 = 30;
pub const DIF_SUBR_STRTOK: u32 = 31;
pub const DIF_SUBR_SUBSTR: u32 = 32;
pub const DIF_SUBR_INDEX: u32 = 33;
pub const DIF_SUBR_RINDEX: u32 = 34;
pub const DIF_SUBR_HTONS: u32 = 35;
pub const DIF_SUBR_HTONL: u32 = 36;
pub const DIF_SUBR_HTONLL: u32 = 37;
pub const DIF_SUBR_NTOHS: u32 = 38;
pub const DIF_SUBR_NTOHL: u32 = 39;
pub const DIF_SUBR_NTOHLL: u32 = 40;
pub const DIF_SUBR_INET_NTOP: u32 = 41;
pub const DIF_SUBR_INET_NTOA: u32 = 42;
pub const DIF_SUBR_INET_NTOA6: u32 = 43;
pub const DIF_SUBR_TOUPPER: u32 = 44;
pub const DIF_SUBR_TOLOWER: u32 = 45;
pub const DIF_SUBR_JSON: u32 = 46;
pub const DIF_SUBR_STRTOLL: u32 = 47;
pub const DIF_SUBR_STRIP: u32 = 48;
pub const DIF_SUBR_MAX: u32 = 48;
pub const DIF_SUBR_APPLE_MIN: u32 = 200;
pub const DIF_SUBR_VM_KERNEL_ADDRPERM: u32 = 200;
pub const DIF_SUBR_KDEBUG_TRACE: u32 = 201;
pub const DIF_SUBR_KDEBUG_TRACE_STRING: u32 = 202;
pub const DIF_SUBR_MTONS: u32 = 203;
pub const DIF_SUBR_PHYSMEM_READ: u32 = 204;
pub const DIF_SUBR_PHYSMEM_WRITE: u32 = 205;
pub const DIF_SUBR_KVTOPHYS: u32 = 206;
pub const DIF_SUBR_LIVEDUMP: u32 = 207;
pub const DIF_SUBR_APPLE_MAX: u32 = 207;
pub const DIF_INSTR_NOP: u32 = 603979776;
pub const DIF_INSTR_POPTS: u32 = 838860800;
pub const DIF_INSTR_FLUSHTS: u32 = 855638016;
pub const DIF_REG_R0: u32 = 0;
pub const DIF_TYPE_CTF: u32 = 0;
pub const DIF_TYPE_STRING: u32 = 1;
pub const DIF_TF_BYREF: u32 = 1;
pub const DIF_TF_BYUREF: u32 = 2;
pub const DIFV_KIND_ARRAY: u32 = 0;
pub const DIFV_KIND_SCALAR: u32 = 1;
pub const DIFV_SCOPE_GLOBAL: u32 = 0;
pub const DIFV_SCOPE_THREAD: u32 = 1;
pub const DIFV_SCOPE_LOCAL: u32 = 2;
pub const DIFV_F_REF: u32 = 1;
pub const DIFV_F_MOD: u32 = 2;
pub const DTRACEACT_NONE: u32 = 0;
pub const DTRACEACT_DIFEXPR: u32 = 1;
pub const DTRACEACT_EXIT: u32 = 2;
pub const DTRACEACT_PRINTF: u32 = 3;
pub const DTRACEACT_PRINTA: u32 = 4;
pub const DTRACEACT_LIBACT: u32 = 5;
pub const DTRACEACT_TRACEMEM: u32 = 6;
pub const DTRACEACT_TRACEMEM_DYNSIZE: u32 = 7;
pub const DTRACEACT_APPLEBINARY: u32 = 50;
pub const DTRACEACT_PROC: u32 = 256;
pub const DTRACEACT_USTACK: u32 = 257;
pub const DTRACEACT_JSTACK: u32 = 258;
pub const DTRACEACT_USYM: u32 = 259;
pub const DTRACEACT_UMOD: u32 = 260;
pub const DTRACEACT_UADDR: u32 = 261;
pub const DTRACEACT_PROC_DESTRUCTIVE: u32 = 512;
pub const DTRACEACT_STOP: u32 = 513;
pub const DTRACEACT_RAISE: u32 = 514;
pub const DTRACEACT_SYSTEM: u32 = 515;
pub const DTRACEACT_FREOPEN: u32 = 516;
pub const DTRACEACT_PIDRESUME: u32 = 562;
pub const DTRACEACT_PROC_CONTROL: u32 = 768;
pub const DTRACEACT_KERNEL: u32 = 1024;
pub const DTRACEACT_STACK: u32 = 1025;
pub const DTRACEACT_SYM: u32 = 1026;
pub const DTRACEACT_MOD: u32 = 1027;
pub const DTRACEACT_KERNEL_DESTRUCTIVE: u32 = 1280;
pub const DTRACEACT_BREAKPOINT: u32 = 1281;
pub const DTRACEACT_PANIC: u32 = 1282;
pub const DTRACEACT_CHILL: u32 = 1283;
pub const DTRACEACT_SPECULATIVE: u32 = 1536;
pub const DTRACEACT_SPECULATE: u32 = 1537;
pub const DTRACEACT_COMMIT: u32 = 1538;
pub const DTRACEACT_DISCARD: u32 = 1539;
pub const DTRACEACT_AGGREGATION: u32 = 1792;
pub const DTRACEAGG_COUNT: u32 = 1793;
pub const DTRACEAGG_MIN: u32 = 1794;
pub const DTRACEAGG_MAX: u32 = 1795;
pub const DTRACEAGG_AVG: u32 = 1796;
pub const DTRACEAGG_SUM: u32 = 1797;
pub const DTRACEAGG_STDDEV: u32 = 1798;
pub const DTRACEAGG_QUANTIZE: u32 = 1799;
pub const DTRACEAGG_LQUANTIZE: u32 = 1800;
pub const DTRACEAGG_LLQUANTIZE: u32 = 1801;
pub const DTRACE_LQUANTIZE_STEPSHIFT: u32 = 48;
pub const DTRACE_LQUANTIZE_LEVELSHIFT: u32 = 32;
pub const DTRACE_LQUANTIZE_BASESHIFT: u32 = 0;
pub const DTRACE_LQUANTIZE_BASEMASK: u32 = 4294967295;
pub const DTRACE_LLQUANTIZE_FACTORSHIFT: u32 = 48;
pub const DTRACE_LLQUANTIZE_LOWSHIFT: u32 = 32;
pub const DTRACE_LLQUANTIZE_HIGHSHIFT: u32 = 16;
pub const DTRACE_LLQUANTIZE_NSTEPSHIFT: u32 = 0;
pub const DTRACE_LLQUANTIZE_NSTEPMASK: u32 = 65535;
pub const DOF_ID_SIZE: u32 = 16;
pub const DOF_ID_MAG0: u32 = 0;
pub const DOF_ID_MAG1: u32 = 1;
pub const DOF_ID_MAG2: u32 = 2;
pub const DOF_ID_MAG3: u32 = 3;
pub const DOF_ID_MODEL: u32 = 4;
pub const DOF_ID_ENCODING: u32 = 5;
pub const DOF_ID_VERSION: u32 = 6;
pub const DOF_ID_DIFVERS: u32 = 7;
pub const DOF_ID_DIFIREG: u32 = 8;
pub const DOF_ID_DIFTREG: u32 = 9;
pub const DOF_ID_PAD: u32 = 10;
pub const DOF_MAG_MAG0: u32 = 127;
pub const DOF_MAG_MAG1: u8 = 68u8;
pub const DOF_MAG_MAG2: u8 = 79u8;
pub const DOF_MAG_MAG3: u8 = 70u8;
pub const DOF_MAG_STRING: &[u8; 5usize] = b"\x7FDOF\0";
pub const DOF_MAG_STRLEN: u32 = 4;
pub const DOF_MODEL_NONE: u32 = 0;
pub const DOF_MODEL_ILP32: u32 = 1;
pub const DOF_MODEL_LP64: u32 = 2;
pub const DOF_MODEL_NATIVE: u32 = 2;
pub const DOF_ENCODE_NONE: u32 = 0;
pub const DOF_ENCODE_LSB: u32 = 1;
pub const DOF_ENCODE_MSB: u32 = 2;
pub const DOF_ENCODE_NATIVE: u32 = 1;
pub const DOF_VERSION_1: u32 = 1;
pub const DOF_VERSION_2: u32 = 2;
pub const DOF_VERSION_3: u32 = 3;
pub const DOF_VERSION: u32 = 3;
pub const DOF_FL_VALID: u32 = 0;
pub const DOF_SECIDX_NONE: i32 = -1;
pub const DOF_STRIDX_NONE: i32 = -1;
pub const DOF_SECT_NONE: u32 = 0;
pub const DOF_SECT_COMMENTS: u32 = 1;
pub const DOF_SECT_SOURCE: u32 = 2;
pub const DOF_SECT_ECBDESC: u32 = 3;
pub const DOF_SECT_PROBEDESC: u32 = 4;
pub const DOF_SECT_ACTDESC: u32 = 5;
pub const DOF_SECT_DIFOHDR: u32 = 6;
pub const DOF_SECT_DIF: u32 = 7;
pub const DOF_SECT_STRTAB: u32 = 8;
pub const DOF_SECT_VARTAB: u32 = 9;
pub const DOF_SECT_RELTAB: u32 = 10;
pub const DOF_SECT_TYPTAB: u32 = 11;
pub const DOF_SECT_URELHDR: u32 = 12;
pub const DOF_SECT_KRELHDR: u32 = 13;
pub const DOF_SECT_OPTDESC: u32 = 14;
pub const DOF_SECT_PROVIDER: u32 = 15;
pub const DOF_SECT_PROBES: u32 = 16;
pub const DOF_SECT_PRARGS: u32 = 17;
pub const DOF_SECT_PROFFS: u32 = 18;
pub const DOF_SECT_INTTAB: u32 = 19;
pub const DOF_SECT_UTSNAME: u32 = 20;
pub const DOF_SECT_XLTAB: u32 = 21;
pub const DOF_SECT_XLMEMBERS: u32 = 22;
pub const DOF_SECT_XLIMPORT: u32 = 23;
pub const DOF_SECT_XLEXPORT: u32 = 24;
pub const DOF_SECT_PREXPORT: u32 = 25;
pub const DOF_SECT_PRENOFFS: u32 = 26;
pub const DOF_SECF_LOAD: u32 = 1;
pub const DOF_RELO_NONE: u32 = 0;
pub const DOF_RELO_SETX: u32 = 1;
pub const DTRACEOPT_BUFSIZE: u32 = 0;
pub const DTRACEOPT_BUFPOLICY: u32 = 1;
pub const DTRACEOPT_DYNVARSIZE: u32 = 2;
pub const DTRACEOPT_AGGSIZE: u32 = 3;
pub const DTRACEOPT_SPECSIZE: u32 = 4;
pub const DTRACEOPT_NSPEC: u32 = 5;
pub const DTRACEOPT_STRSIZE: u32 = 6;
pub const DTRACEOPT_CLEANRATE: u32 = 7;
pub const DTRACEOPT_CPU: u32 = 8;
pub const DTRACEOPT_BUFRESIZE: u32 = 9;
pub const DTRACEOPT_GRABANON: u32 = 10;
pub const DTRACEOPT_FLOWINDENT: u32 = 11;
pub const DTRACEOPT_QUIET: u32 = 12;
pub const DTRACEOPT_STACKFRAMES: u32 = 13;
pub const DTRACEOPT_USTACKFRAMES: u32 = 14;
pub const DTRACEOPT_AGGRATE: u32 = 15;
pub const DTRACEOPT_SWITCHRATE: u32 = 16;
pub const DTRACEOPT_STATUSRATE: u32 = 17;
pub const DTRACEOPT_DESTRUCTIVE: u32 = 18;
pub const DTRACEOPT_STACKINDENT: u32 = 19;
pub const DTRACEOPT_RAWBYTES: u32 = 20;
pub const DTRACEOPT_JSTACKFRAMES: u32 = 21;
pub const DTRACEOPT_JSTACKSTRSIZE: u32 = 22;
pub const DTRACEOPT_AGGSORTKEY: u32 = 23;
pub const DTRACEOPT_AGGSORTREV: u32 = 24;
pub const DTRACEOPT_AGGSORTPOS: u32 = 25;
pub const DTRACEOPT_AGGSORTKEYPOS: u32 = 26;
pub const DTRACEOPT_AGGHIST: u32 = 27;
pub const DTRACEOPT_AGGPACK: u32 = 28;
pub const DTRACEOPT_AGGZOOM: u32 = 29;
pub const DTRACEOPT_TEMPORAL: u32 = 30;
pub const DTRACEOPT_STACKSYMBOLS: u32 = 31;
pub const DTRACEOPT_BUFLIMIT: u32 = 32;
pub const DTRACEOPT_MAX: u32 = 33;
pub const DTRACEOPT_BUFPOLICY_RING: u32 = 0;
pub const DTRACEOPT_BUFPOLICY_FILL: u32 = 1;
pub const DTRACEOPT_BUFPOLICY_SWITCH: u32 = 2;
pub const DTRACEOPT_BUFRESIZE_AUTO: u32 = 0;
pub const DTRACEOPT_BUFRESIZE_MANUAL: u32 = 1;
pub const DTRACEFLT_UNKNOWN: u32 = 0;
pub const DTRACEFLT_BADADDR: u32 = 1;
pub const DTRACEFLT_BADALIGN: u32 = 2;
pub const DTRACEFLT_ILLOP: u32 = 3;
pub const DTRACEFLT_DIVZERO: u32 = 4;
pub const DTRACEFLT_NOSCRATCH: u32 = 5;
pub const DTRACEFLT_KPRIV: u32 = 6;
pub const DTRACEFLT_UPRIV: u32 = 7;
pub const DTRACEFLT_TUPOFLOW: u32 = 8;
pub const DTRACEFLT_BADSTACK: u32 = 9;
pub const DTRACEFLT_LIBRARY: u32 = 1000;
pub const DTRACE_STABILITY_INTERNAL: u32 = 0;
pub const DTRACE_STABILITY_PRIVATE: u32 = 1;
pub const DTRACE_STABILITY_OBSOLETE: u32 = 2;
pub const DTRACE_STABILITY_EXTERNAL: u32 = 3;
pub const DTRACE_STABILITY_UNSTABLE: u32 = 4;
pub const DTRACE_STABILITY_EVOLVING: u32 = 5;
pub const DTRACE_STABILITY_STABLE: u32 = 6;
pub const DTRACE_STABILITY_STANDARD: u32 = 7;
pub const DTRACE_STABILITY_MAX: u32 = 7;
pub const DTRACE_CLASS_UNKNOWN: u32 = 0;
pub const DTRACE_CLASS_CPU: u32 = 1;
pub const DTRACE_CLASS_PLATFORM: u32 = 2;
pub const DTRACE_CLASS_GROUP: u32 = 3;
pub const DTRACE_CLASS_ISA: u32 = 4;
pub const DTRACE_CLASS_COMMON: u32 = 5;
pub const DTRACE_CLASS_MAX: u32 = 5;
pub const DTRACE_PRIV_NONE: u32 = 0;
pub const DTRACE_PRIV_KERNEL: u32 = 1;
pub const DTRACE_PRIV_USER: u32 = 2;
pub const DTRACE_PRIV_PROC: u32 = 4;
pub const DTRACE_PRIV_OWNER: u32 = 8;
pub const DTRACE_PRIV_ZONEOWNER: u32 = 16;
pub const DTRACE_PRIV_ALL: u32 = 31;
pub const DTRACE_WAKE_TIMEOUT: u32 = 0;
pub const DTRACE_WAKE_BUF_LIMIT: u32 = 1;
pub const DTRACEMNR_DTRACE: &[u8; 7usize] = b"dtrace\0";
pub const DTRACEMNR_HELPER: &[u8; 13usize] = b"dtracehelper\0";
pub const DTRACEMNRN_DTRACE: u32 = 0;
pub const DTRACEMNRN_HELPER: u32 = 1;
pub const DTRACEMNRN_CLONE: u32 = 2;
pub const DTRACE_INVOP_PUSHL_EBP: u32 = 1;
pub const DTRACE_INVOP_POPL_EBP: u32 = 2;
pub const DTRACE_INVOP_LEAVE: u32 = 3;
pub const DTRACE_INVOP_NOP: u32 = 4;
pub const DTRACE_INVOP_RET: u32 = 5;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10usize] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const DTRACE_VERSION: u32 = 3;
pub const DTRACE_O_NODEV: u32 = 1;
pub const DTRACE_O_NOSYS: u32 = 2;
pub const DTRACE_O_LP64: u32 = 4;
pub const DTRACE_O_ILP32: u32 = 8;
pub const DTRACE_O_MASK: u32 = 15;
pub const DTRACE_C_DIFV: u32 = 1;
pub const DTRACE_C_EMPTY: u32 = 2;
pub const DTRACE_C_ZDEFS: u32 = 4;
pub const DTRACE_C_EATTR: u32 = 8;
pub const DTRACE_C_CPP: u32 = 16;
pub const DTRACE_C_KNODEF: u32 = 32;
pub const DTRACE_C_UNODEF: u32 = 64;
pub const DTRACE_C_PSPEC: u32 = 128;
pub const DTRACE_C_ETAGS: u32 = 256;
pub const DTRACE_C_ARGREF: u32 = 512;
pub const DTRACE_C_DEFARG: u32 = 2048;
pub const DTRACE_C_NOLIBS: u32 = 4096;
pub const DTRACE_C_MASK: u32 = 7167;
pub const DTRACE_D_STRIP: u32 = 1;
pub const DTRACE_D_PROBES: u32 = 2;
pub const DTRACE_D_MASK: u32 = 3;
pub const DTRACE_CONSUME_ERROR: i32 = -1;
pub const DTRACE_CONSUME_THIS: u32 = 0;
pub const DTRACE_CONSUME_NEXT: u32 = 1;
pub const DTRACE_CONSUME_ABORT: u32 = 2;
pub const DTRACE_STATUS_NONE: u32 = 0;
pub const DTRACE_STATUS_OKAY: u32 = 1;
pub const DTRACE_STATUS_EXITED: u32 = 2;
pub const DTRACE_STATUS_FILLED: u32 = 3;
pub const DTRACE_STATUS_STOPPED: u32 = 4;
pub const DTRACE_HANDLE_ABORT: i32 = -1;
pub const DTRACE_HANDLE_OK: u32 = 0;
pub const DTRACE_BUFDATA_AGGKEY: u32 = 1;
pub const DTRACE_BUFDATA_AGGVAL: u32 = 2;
pub const DTRACE_BUFDATA_AGGFORMAT: u32 = 4;
pub const DTRACE_BUFDATA_AGGLAST: u32 = 8;
pub const DTRACE_A_PERCPU: u32 = 1;
pub const DTRACE_A_KEEPDELTA: u32 = 2;
pub const DTRACE_A_ANONYMOUS: u32 = 4;
pub const DTRACE_AGGWALK_ERROR: i32 = -1;
pub const DTRACE_AGGWALK_NEXT: u32 = 0;
pub const DTRACE_AGGWALK_ABORT: u32 = 1;
pub const DTRACE_AGGWALK_CLEAR: u32 = 2;
pub const DTRACE_AGGWALK_NORMALIZE: u32 = 3;
pub const DTRACE_AGGWALK_DENORMALIZE: u32 = 4;
pub const DTRACE_AGGWALK_REMOVE: u32 = 5;
pub const DTRACE_AGD_PRINTED: u32 = 1;
pub const DTRACE_OBJ_F_KERNEL: u32 = 1;
pub const DTRACE_OBJ_F_PRIMARY: u32 = 2;
pub const DTRACE_DESC2STR_MAX: u32 = 1024;
pub const DTRACE_ATTR2STR_MAX: u32 = 64;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    fn test_field___mbstate8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__mbstate_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__mbstate8)
            )
        );
    }
    test_field___mbstate8();
    fn test_field__mbstateL() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__mbstate_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(_mbstateL)
            )
        );
    }
    test_field__mbstateL();
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    fn test_field___routine() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_pthread_handler_rec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_pthread_handler_rec),
                "::",
                stringify!(__routine)
            )
        );
    }
    test_field___routine();
    fn test_field___arg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_pthread_handler_rec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_pthread_handler_rec),
                "::",
                stringify!(__arg)
            )
        );
    }
    test_field___arg();
    fn test_field___next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_pthread_handler_rec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_pthread_handler_rec),
                "::",
                stringify!(__next)
            )
        );
    }
    test_field___next();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_attr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_attr_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_attr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_attr_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_cond_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_cond_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_condattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_condattr_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_condattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_condattr_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_mutex_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_mutex_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_mutexattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_mutexattr_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_mutexattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_mutexattr_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_once_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_once_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_once_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_once_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_rwlock_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_rwlock_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_rwlock_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_rwlock_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_rwlockattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_rwlockattr_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_rwlockattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_rwlockattr_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___cleanup_stack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_t),
                "::",
                stringify!(__cleanup_stack)
            )
        );
    }
    test_field___cleanup_stack();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::std::os::raw::c_int;
pub type vm_offset_t = usize;
pub type vm_size_t = usize;
pub type mach_vm_address_t = u64;
pub type mach_vm_offset_t = u64;
pub type mach_vm_size_t = u64;
pub type vm_map_offset_t = u64;
pub type vm_map_address_t = u64;
pub type vm_map_size_t = u64;
pub type mach_port_context_t = mach_vm_address_t;
pub type boolean_t = ::std::os::raw::c_uint;
pub type cpu_type_t = integer_t;
pub type cpu_subtype_t = integer_t;
pub type cpu_threadtype_t = integer_t;
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type uid_t = __darwin_uid_t;
pub type clock_t = __darwin_clock_t;
pub type size_t = __darwin_size_t;
pub type ssize_t = __darwin_ssize_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        4usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    fn test_field_fds_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<fd_set>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(fd_set),
                "::",
                stringify!(fds_bits)
            )
        );
    }
    test_field_fds_bits();
}
extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_i386_thread_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_thread_state>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_thread_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_thread_state))
    );
    fn test_field___eax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__eax) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__eax)
            )
        );
    }
    test_field___eax();
    fn test_field___ebx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ebx) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__ebx)
            )
        );
    }
    test_field___ebx();
    fn test_field___ecx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ecx) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__ecx)
            )
        );
    }
    test_field___ecx();
    fn test_field___edx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__edx) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__edx)
            )
        );
    }
    test_field___edx();
    fn test_field___edi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__edi) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__edi)
            )
        );
    }
    test_field___edi();
    fn test_field___esi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__esi) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__esi)
            )
        );
    }
    test_field___esi();
    fn test_field___ebp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ebp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__ebp)
            )
        );
    }
    test_field___ebp();
    fn test_field___esp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__esp) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__esp)
            )
        );
    }
    test_field___esp();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___eflags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__eflags) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__eflags)
            )
        );
    }
    test_field___eflags();
    fn test_field___eip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__eip) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__eip)
            )
        );
    }
    test_field___eip();
    fn test_field___cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__cs) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__cs)
            )
        );
    }
    test_field___cs();
    fn test_field___ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ds) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__ds)
            )
        );
    }
    test_field___ds();
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
    fn test_field___gs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__gs) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__gs)
            )
        );
    }
    test_field___gs();
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_control {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout___darwin_fp_control() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_control>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_control))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_control>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_control))
    );
}
impl __darwin_fp_control {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___pc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __rc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___rc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __pc: ::std::os::raw::c_ushort,
        __rc: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let __pc: u16 = unsafe { ::std::mem::transmute(__pc) };
            __pc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let __rc: u16 = unsafe { ::std::mem::transmute(__rc) };
            __rc as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_status {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout___darwin_fp_status() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_status>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_status))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_status>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_status))
    );
}
impl __darwin_fp_status {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __stkflt(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___stkflt(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __errsumm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___errsumm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c0(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c0(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c1(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c1(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c2(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c2(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tos(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set___tos(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn __c3(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c3(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __busy(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___busy(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __stkflt: ::std::os::raw::c_ushort,
        __errsumm: ::std::os::raw::c_ushort,
        __c0: ::std::os::raw::c_ushort,
        __c1: ::std::os::raw::c_ushort,
        __c2: ::std::os::raw::c_ushort,
        __tos: ::std::os::raw::c_ushort,
        __c3: ::std::os::raw::c_ushort,
        __busy: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let __stkflt: u16 = unsafe { ::std::mem::transmute(__stkflt) };
            __stkflt as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __errsumm: u16 = unsafe { ::std::mem::transmute(__errsumm) };
            __errsumm as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let __c0: u16 = unsafe { ::std::mem::transmute(__c0) };
            __c0 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let __c1: u16 = unsafe { ::std::mem::transmute(__c1) };
            __c1 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let __c2: u16 = unsafe { ::std::mem::transmute(__c2) };
            __c2 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let __tos: u16 = unsafe { ::std::mem::transmute(__tos) };
            __tos as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let __c3: u16 = unsafe { ::std::mem::transmute(__c3) };
            __c3 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let __busy: u16 = unsafe { ::std::mem::transmute(__busy) };
            __busy as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
#[test]
fn bindgen_test_layout___darwin_mmst_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mmst_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mmst_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_mmst_reg))
    );
    fn test_field___mmst_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mmst_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__mmst_reg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mmst_reg),
                "::",
                stringify!(__mmst_reg)
            )
        );
    }
    test_field___mmst_reg();
    fn test_field___mmst_rsrv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mmst_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__mmst_rsrv) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mmst_reg),
                "::",
                stringify!(__mmst_rsrv)
            )
        );
    }
    test_field___mmst_rsrv();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_xmm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_xmm_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_xmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_xmm_reg))
    );
    fn test_field___xmm_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_xmm_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__xmm_reg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_xmm_reg),
                "::",
                stringify!(__xmm_reg)
            )
        );
    }
    test_field___xmm_reg();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ymm_reg {
    pub __ymm_reg: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout___darwin_ymm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_ymm_reg>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ymm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_ymm_reg))
    );
    fn test_field___ymm_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ymm_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ymm_reg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ymm_reg),
                "::",
                stringify!(__ymm_reg)
            )
        );
    }
    test_field___ymm_reg();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_zmm_reg {
    pub __zmm_reg: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout___darwin_zmm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_zmm_reg>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_zmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_zmm_reg))
    );
    fn test_field___zmm_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_zmm_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__zmm_reg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_zmm_reg),
                "::",
                stringify!(__zmm_reg)
            )
        );
    }
    test_field___zmm_reg();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_opmask_reg {
    pub __opmask_reg: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout___darwin_opmask_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_opmask_reg>(),
        8usize,
        concat!("Size of: ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_opmask_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_opmask_reg))
    );
    fn test_field___opmask_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_opmask_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opmask_reg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_opmask_reg),
                "::",
                stringify!(__opmask_reg)
            )
        );
    }
    test_field___opmask_reg();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_i386_float_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_float_state>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_float_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_float_state))
    );
    fn test_field___fpu_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_reserved)
            )
        );
    }
    test_field___fpu_reserved();
    fn test_field___fpu_fcw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_fcw)
            )
        );
    }
    test_field___fpu_fcw();
    fn test_field___fpu_fsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_fsw)
            )
        );
    }
    test_field___fpu_fsw();
    fn test_field___fpu_ftw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_ftw)
            )
        );
    }
    test_field___fpu_ftw();
    fn test_field___fpu_rsrv1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_rsrv1)
            )
        );
    }
    test_field___fpu_rsrv1();
    fn test_field___fpu_fop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_fop)
            )
        );
    }
    test_field___fpu_fop();
    fn test_field___fpu_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_ip)
            )
        );
    }
    test_field___fpu_ip();
    fn test_field___fpu_cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_cs)
            )
        );
    }
    test_field___fpu_cs();
    fn test_field___fpu_rsrv2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_rsrv2)
            )
        );
    }
    test_field___fpu_rsrv2();
    fn test_field___fpu_dp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_dp)
            )
        );
    }
    test_field___fpu_dp();
    fn test_field___fpu_ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_ds)
            )
        );
    }
    test_field___fpu_ds();
    fn test_field___fpu_rsrv3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_rsrv3)
            )
        );
    }
    test_field___fpu_rsrv3();
    fn test_field___fpu_mxcsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_mxcsr)
            )
        );
    }
    test_field___fpu_mxcsr();
    fn test_field___fpu_mxcsrmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_mxcsrmask)
            )
        );
    }
    test_field___fpu_mxcsrmask();
    fn test_field___fpu_stmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm0)
            )
        );
    }
    test_field___fpu_stmm0();
    fn test_field___fpu_stmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm1)
            )
        );
    }
    test_field___fpu_stmm1();
    fn test_field___fpu_stmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm2)
            )
        );
    }
    test_field___fpu_stmm2();
    fn test_field___fpu_stmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm3)
            )
        );
    }
    test_field___fpu_stmm3();
    fn test_field___fpu_stmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm4)
            )
        );
    }
    test_field___fpu_stmm4();
    fn test_field___fpu_stmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm5)
            )
        );
    }
    test_field___fpu_stmm5();
    fn test_field___fpu_stmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm6)
            )
        );
    }
    test_field___fpu_stmm6();
    fn test_field___fpu_stmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm7)
            )
        );
    }
    test_field___fpu_stmm7();
    fn test_field___fpu_xmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm0)
            )
        );
    }
    test_field___fpu_xmm0();
    fn test_field___fpu_xmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm1)
            )
        );
    }
    test_field___fpu_xmm1();
    fn test_field___fpu_xmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm2)
            )
        );
    }
    test_field___fpu_xmm2();
    fn test_field___fpu_xmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm3)
            )
        );
    }
    test_field___fpu_xmm3();
    fn test_field___fpu_xmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm4)
            )
        );
    }
    test_field___fpu_xmm4();
    fn test_field___fpu_xmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm5)
            )
        );
    }
    test_field___fpu_xmm5();
    fn test_field___fpu_xmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm6)
            )
        );
    }
    test_field___fpu_xmm6();
    fn test_field___fpu_xmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm7)
            )
        );
    }
    test_field___fpu_xmm7();
    fn test_field___fpu_rsrv4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_rsrv4)
            )
        );
    }
    test_field___fpu_rsrv4();
    fn test_field___fpu_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_reserved1)
            )
        );
    }
    test_field___fpu_reserved1();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx_state>(),
        716usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx_state))
    );
    fn test_field___fpu_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_reserved)
            )
        );
    }
    test_field___fpu_reserved();
    fn test_field___fpu_fcw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_fcw)
            )
        );
    }
    test_field___fpu_fcw();
    fn test_field___fpu_fsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_fsw)
            )
        );
    }
    test_field___fpu_fsw();
    fn test_field___fpu_ftw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ftw)
            )
        );
    }
    test_field___fpu_ftw();
    fn test_field___fpu_rsrv1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_rsrv1)
            )
        );
    }
    test_field___fpu_rsrv1();
    fn test_field___fpu_fop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_fop)
            )
        );
    }
    test_field___fpu_fop();
    fn test_field___fpu_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ip)
            )
        );
    }
    test_field___fpu_ip();
    fn test_field___fpu_cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_cs)
            )
        );
    }
    test_field___fpu_cs();
    fn test_field___fpu_rsrv2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_rsrv2)
            )
        );
    }
    test_field___fpu_rsrv2();
    fn test_field___fpu_dp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_dp)
            )
        );
    }
    test_field___fpu_dp();
    fn test_field___fpu_ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ds)
            )
        );
    }
    test_field___fpu_ds();
    fn test_field___fpu_rsrv3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_rsrv3)
            )
        );
    }
    test_field___fpu_rsrv3();
    fn test_field___fpu_mxcsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_mxcsr)
            )
        );
    }
    test_field___fpu_mxcsr();
    fn test_field___fpu_mxcsrmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_mxcsrmask)
            )
        );
    }
    test_field___fpu_mxcsrmask();
    fn test_field___fpu_stmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm0)
            )
        );
    }
    test_field___fpu_stmm0();
    fn test_field___fpu_stmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm1)
            )
        );
    }
    test_field___fpu_stmm1();
    fn test_field___fpu_stmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm2)
            )
        );
    }
    test_field___fpu_stmm2();
    fn test_field___fpu_stmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm3)
            )
        );
    }
    test_field___fpu_stmm3();
    fn test_field___fpu_stmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm4)
            )
        );
    }
    test_field___fpu_stmm4();
    fn test_field___fpu_stmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm5)
            )
        );
    }
    test_field___fpu_stmm5();
    fn test_field___fpu_stmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm6)
            )
        );
    }
    test_field___fpu_stmm6();
    fn test_field___fpu_stmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm7)
            )
        );
    }
    test_field___fpu_stmm7();
    fn test_field___fpu_xmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm0)
            )
        );
    }
    test_field___fpu_xmm0();
    fn test_field___fpu_xmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm1)
            )
        );
    }
    test_field___fpu_xmm1();
    fn test_field___fpu_xmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm2)
            )
        );
    }
    test_field___fpu_xmm2();
    fn test_field___fpu_xmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm3)
            )
        );
    }
    test_field___fpu_xmm3();
    fn test_field___fpu_xmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm4)
            )
        );
    }
    test_field___fpu_xmm4();
    fn test_field___fpu_xmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm5)
            )
        );
    }
    test_field___fpu_xmm5();
    fn test_field___fpu_xmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm6)
            )
        );
    }
    test_field___fpu_xmm6();
    fn test_field___fpu_xmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm7)
            )
        );
    }
    test_field___fpu_xmm7();
    fn test_field___fpu_rsrv4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_rsrv4)
            )
        );
    }
    test_field___fpu_rsrv4();
    fn test_field___fpu_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_reserved1)
            )
        );
    }
    test_field___fpu_reserved1();
    fn test_field___avx_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize
            },
            524usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__avx_reserved1)
            )
        );
    }
    test_field___avx_reserved1();
    fn test_field___fpu_ymmh0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize
            },
            588usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh0)
            )
        );
    }
    test_field___fpu_ymmh0();
    fn test_field___fpu_ymmh1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize
            },
            604usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh1)
            )
        );
    }
    test_field___fpu_ymmh1();
    fn test_field___fpu_ymmh2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize
            },
            620usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh2)
            )
        );
    }
    test_field___fpu_ymmh2();
    fn test_field___fpu_ymmh3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize
            },
            636usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh3)
            )
        );
    }
    test_field___fpu_ymmh3();
    fn test_field___fpu_ymmh4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize
            },
            652usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh4)
            )
        );
    }
    test_field___fpu_ymmh4();
    fn test_field___fpu_ymmh5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize
            },
            668usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh5)
            )
        );
    }
    test_field___fpu_ymmh5();
    fn test_field___fpu_ymmh6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize
            },
            684usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh6)
            )
        );
    }
    test_field___fpu_ymmh6();
    fn test_field___fpu_ymmh7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize
            },
            700usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh7)
            )
        );
    }
    test_field___fpu_ymmh7();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx512_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx512_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx512_state>(),
        1036usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx512_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx512_state))
    );
    fn test_field___fpu_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_reserved)
            )
        );
    }
    test_field___fpu_reserved();
    fn test_field___fpu_fcw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_fcw)
            )
        );
    }
    test_field___fpu_fcw();
    fn test_field___fpu_fsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_fsw)
            )
        );
    }
    test_field___fpu_fsw();
    fn test_field___fpu_ftw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ftw)
            )
        );
    }
    test_field___fpu_ftw();
    fn test_field___fpu_rsrv1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_rsrv1)
            )
        );
    }
    test_field___fpu_rsrv1();
    fn test_field___fpu_fop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_fop)
            )
        );
    }
    test_field___fpu_fop();
    fn test_field___fpu_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ip)
            )
        );
    }
    test_field___fpu_ip();
    fn test_field___fpu_cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_cs)
            )
        );
    }
    test_field___fpu_cs();
    fn test_field___fpu_rsrv2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_rsrv2)
            )
        );
    }
    test_field___fpu_rsrv2();
    fn test_field___fpu_dp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_dp)
            )
        );
    }
    test_field___fpu_dp();
    fn test_field___fpu_ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ds)
            )
        );
    }
    test_field___fpu_ds();
    fn test_field___fpu_rsrv3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_rsrv3)
            )
        );
    }
    test_field___fpu_rsrv3();
    fn test_field___fpu_mxcsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_mxcsr)
            )
        );
    }
    test_field___fpu_mxcsr();
    fn test_field___fpu_mxcsrmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_mxcsrmask)
            )
        );
    }
    test_field___fpu_mxcsrmask();
    fn test_field___fpu_stmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm0)
            )
        );
    }
    test_field___fpu_stmm0();
    fn test_field___fpu_stmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm1)
            )
        );
    }
    test_field___fpu_stmm1();
    fn test_field___fpu_stmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm2)
            )
        );
    }
    test_field___fpu_stmm2();
    fn test_field___fpu_stmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm3)
            )
        );
    }
    test_field___fpu_stmm3();
    fn test_field___fpu_stmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm4)
            )
        );
    }
    test_field___fpu_stmm4();
    fn test_field___fpu_stmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm5)
            )
        );
    }
    test_field___fpu_stmm5();
    fn test_field___fpu_stmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm6)
            )
        );
    }
    test_field___fpu_stmm6();
    fn test_field___fpu_stmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm7)
            )
        );
    }
    test_field___fpu_stmm7();
    fn test_field___fpu_xmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm0)
            )
        );
    }
    test_field___fpu_xmm0();
    fn test_field___fpu_xmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm1)
            )
        );
    }
    test_field___fpu_xmm1();
    fn test_field___fpu_xmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm2)
            )
        );
    }
    test_field___fpu_xmm2();
    fn test_field___fpu_xmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm3)
            )
        );
    }
    test_field___fpu_xmm3();
    fn test_field___fpu_xmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm4)
            )
        );
    }
    test_field___fpu_xmm4();
    fn test_field___fpu_xmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm5)
            )
        );
    }
    test_field___fpu_xmm5();
    fn test_field___fpu_xmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm6)
            )
        );
    }
    test_field___fpu_xmm6();
    fn test_field___fpu_xmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm7)
            )
        );
    }
    test_field___fpu_xmm7();
    fn test_field___fpu_rsrv4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_rsrv4)
            )
        );
    }
    test_field___fpu_rsrv4();
    fn test_field___fpu_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_reserved1)
            )
        );
    }
    test_field___fpu_reserved1();
    fn test_field___avx_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize
            },
            524usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__avx_reserved1)
            )
        );
    }
    test_field___avx_reserved1();
    fn test_field___fpu_ymmh0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize
            },
            588usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh0)
            )
        );
    }
    test_field___fpu_ymmh0();
    fn test_field___fpu_ymmh1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize
            },
            604usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh1)
            )
        );
    }
    test_field___fpu_ymmh1();
    fn test_field___fpu_ymmh2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize
            },
            620usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh2)
            )
        );
    }
    test_field___fpu_ymmh2();
    fn test_field___fpu_ymmh3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize
            },
            636usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh3)
            )
        );
    }
    test_field___fpu_ymmh3();
    fn test_field___fpu_ymmh4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize
            },
            652usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh4)
            )
        );
    }
    test_field___fpu_ymmh4();
    fn test_field___fpu_ymmh5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize
            },
            668usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh5)
            )
        );
    }
    test_field___fpu_ymmh5();
    fn test_field___fpu_ymmh6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize
            },
            684usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh6)
            )
        );
    }
    test_field___fpu_ymmh6();
    fn test_field___fpu_ymmh7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize
            },
            700usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh7)
            )
        );
    }
    test_field___fpu_ymmh7();
    fn test_field___fpu_k0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k0) as usize - ptr as usize
            },
            716usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k0)
            )
        );
    }
    test_field___fpu_k0();
    fn test_field___fpu_k1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k1) as usize - ptr as usize
            },
            724usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k1)
            )
        );
    }
    test_field___fpu_k1();
    fn test_field___fpu_k2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k2) as usize - ptr as usize
            },
            732usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k2)
            )
        );
    }
    test_field___fpu_k2();
    fn test_field___fpu_k3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k3) as usize - ptr as usize
            },
            740usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k3)
            )
        );
    }
    test_field___fpu_k3();
    fn test_field___fpu_k4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k4) as usize - ptr as usize
            },
            748usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k4)
            )
        );
    }
    test_field___fpu_k4();
    fn test_field___fpu_k5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k5) as usize - ptr as usize
            },
            756usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k5)
            )
        );
    }
    test_field___fpu_k5();
    fn test_field___fpu_k6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k6) as usize - ptr as usize
            },
            764usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k6)
            )
        );
    }
    test_field___fpu_k6();
    fn test_field___fpu_k7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k7) as usize - ptr as usize
            },
            772usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k7)
            )
        );
    }
    test_field___fpu_k7();
    fn test_field___fpu_zmmh0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh0) as usize - ptr as usize
            },
            780usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh0)
            )
        );
    }
    test_field___fpu_zmmh0();
    fn test_field___fpu_zmmh1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh1) as usize - ptr as usize
            },
            812usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh1)
            )
        );
    }
    test_field___fpu_zmmh1();
    fn test_field___fpu_zmmh2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh2) as usize - ptr as usize
            },
            844usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh2)
            )
        );
    }
    test_field___fpu_zmmh2();
    fn test_field___fpu_zmmh3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh3) as usize - ptr as usize
            },
            876usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh3)
            )
        );
    }
    test_field___fpu_zmmh3();
    fn test_field___fpu_zmmh4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh4) as usize - ptr as usize
            },
            908usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh4)
            )
        );
    }
    test_field___fpu_zmmh4();
    fn test_field___fpu_zmmh5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh5) as usize - ptr as usize
            },
            940usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh5)
            )
        );
    }
    test_field___fpu_zmmh5();
    fn test_field___fpu_zmmh6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh6) as usize - ptr as usize
            },
            972usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh6)
            )
        );
    }
    test_field___fpu_zmmh6();
    fn test_field___fpu_zmmh7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh7) as usize - ptr as usize
            },
            1004usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh7)
            )
        );
    }
    test_field___fpu_zmmh7();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_i386_exception_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_exception_state>(),
        12usize,
        concat!("Size of: ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_exception_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_exception_state))
    );
    fn test_field___trapno() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_exception_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__trapno) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_exception_state),
                "::",
                stringify!(__trapno)
            )
        );
    }
    test_field___trapno();
    fn test_field___cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_exception_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__cpu) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_exception_state),
                "::",
                stringify!(__cpu)
            )
        );
    }
    test_field___cpu();
    fn test_field___err() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_exception_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__err) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_exception_state),
                "::",
                stringify!(__err)
            )
        );
    }
    test_field___err();
    fn test_field___faultvaddr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_exception_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__faultvaddr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_exception_state),
                "::",
                stringify!(__faultvaddr)
            )
        );
    }
    test_field___faultvaddr();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state32>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state32))
    );
    fn test_field___dr0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr0)
            )
        );
    }
    test_field___dr0();
    fn test_field___dr1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr1) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr1)
            )
        );
    }
    test_field___dr1();
    fn test_field___dr2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr2) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr2)
            )
        );
    }
    test_field___dr2();
    fn test_field___dr3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr3) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr3)
            )
        );
    }
    test_field___dr3();
    fn test_field___dr4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr4) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr4)
            )
        );
    }
    test_field___dr4();
    fn test_field___dr5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr5) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr5)
            )
        );
    }
    test_field___dr5();
    fn test_field___dr6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr6) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr6)
            )
        );
    }
    test_field___dr6();
    fn test_field___dr7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr7) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr7)
            )
        );
    }
    test_field___dr7();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_instruction_state {
    pub __insn_stream_valid_bytes: ::std::os::raw::c_int,
    pub __insn_offset: ::std::os::raw::c_int,
    pub __out_of_synch: ::std::os::raw::c_int,
    pub __insn_bytes: [__uint8_t; 2380usize],
    pub __insn_cacheline: [__uint8_t; 64usize],
}
#[test]
fn bindgen_test_layout___x86_instruction_state() {
    assert_eq!(
        ::std::mem::size_of::<__x86_instruction_state>(),
        2456usize,
        concat!("Size of: ", stringify!(__x86_instruction_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__x86_instruction_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__x86_instruction_state))
    );
    fn test_field___insn_stream_valid_bytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__x86_instruction_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__insn_stream_valid_bytes) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__x86_instruction_state),
                "::",
                stringify!(__insn_stream_valid_bytes)
            )
        );
    }
    test_field___insn_stream_valid_bytes();
    fn test_field___insn_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__x86_instruction_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__insn_offset) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__x86_instruction_state),
                "::",
                stringify!(__insn_offset)
            )
        );
    }
    test_field___insn_offset();
    fn test_field___out_of_synch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__x86_instruction_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__out_of_synch) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__x86_instruction_state),
                "::",
                stringify!(__out_of_synch)
            )
        );
    }
    test_field___out_of_synch();
    fn test_field___insn_bytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__x86_instruction_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__insn_bytes) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__x86_instruction_state),
                "::",
                stringify!(__insn_bytes)
            )
        );
    }
    test_field___insn_bytes();
    fn test_field___insn_cacheline() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__x86_instruction_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__insn_cacheline) as usize - ptr as usize
            },
            2392usize,
            concat!(
                "Offset of field: ",
                stringify!(__x86_instruction_state),
                "::",
                stringify!(__insn_cacheline)
            )
        );
    }
    test_field___insn_cacheline();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __last_branch_record {
    pub __from_ip: __uint64_t,
    pub __to_ip: __uint64_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[test]
fn bindgen_test_layout___last_branch_record() {
    assert_eq!(
        ::std::mem::size_of::<__last_branch_record>(),
        24usize,
        concat!("Size of: ", stringify!(__last_branch_record))
    );
    assert_eq!(
        ::std::mem::align_of::<__last_branch_record>(),
        8usize,
        concat!("Alignment of ", stringify!(__last_branch_record))
    );
    fn test_field___from_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__last_branch_record>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__from_ip) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__last_branch_record),
                "::",
                stringify!(__from_ip)
            )
        );
    }
    test_field___from_ip();
    fn test_field___to_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__last_branch_record>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__to_ip) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__last_branch_record),
                "::",
                stringify!(__to_ip)
            )
        );
    }
    test_field___to_ip();
}
impl __last_branch_record {
    #[inline]
    pub fn __mispredict(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___mispredict(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tsx_abort(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___tsx_abort(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __in_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___in_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set___cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 13u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __mispredict: __uint32_t,
        __tsx_abort: __uint32_t,
        __in_tsx: __uint32_t,
        __cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __mispredict: u32 = unsafe { ::std::mem::transmute(__mispredict) };
            __mispredict as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __tsx_abort: u32 = unsafe { ::std::mem::transmute(__tsx_abort) };
            __tsx_abort as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __in_tsx: u32 = unsafe { ::std::mem::transmute(__in_tsx) };
            __in_tsx as u64
        });
        __bindgen_bitfield_unit.set(3usize, 16u8, {
            let __cycle_count: u32 = unsafe { ::std::mem::transmute(__cycle_count) };
            __cycle_count as u64
        });
        __bindgen_bitfield_unit.set(19usize, 13u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __last_branch_state {
    pub __lbr_count: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __lbrs: [__last_branch_record; 32usize],
}
#[test]
fn bindgen_test_layout___last_branch_state() {
    assert_eq!(
        ::std::mem::size_of::<__last_branch_state>(),
        776usize,
        concat!("Size of: ", stringify!(__last_branch_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__last_branch_state>(),
        8usize,
        concat!("Alignment of ", stringify!(__last_branch_state))
    );
    fn test_field___lbr_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__last_branch_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__lbr_count) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__last_branch_state),
                "::",
                stringify!(__lbr_count)
            )
        );
    }
    test_field___lbr_count();
    fn test_field___lbrs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__last_branch_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__lbrs) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__last_branch_state),
                "::",
                stringify!(__lbrs)
            )
        );
    }
    test_field___lbrs();
}
impl __last_branch_state {
    #[inline]
    pub fn __lbr_supported_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __lbr_supported_cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __lbr_supported_tsx: __uint32_t,
        __lbr_supported_cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __lbr_supported_tsx: u32 = unsafe { ::std::mem::transmute(__lbr_supported_tsx) };
            __lbr_supported_tsx as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __lbr_supported_cycle_count: u32 =
                unsafe { ::std::mem::transmute(__lbr_supported_cycle_count) };
            __lbr_supported_cycle_count as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___x86_pagein_state() {
    assert_eq!(
        ::std::mem::size_of::<__x86_pagein_state>(),
        4usize,
        concat!("Size of: ", stringify!(__x86_pagein_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__x86_pagein_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__x86_pagein_state))
    );
    fn test_field___pagein_error() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__x86_pagein_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pagein_error) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__x86_pagein_state),
                "::",
                stringify!(__pagein_error)
            )
        );
    }
    test_field___pagein_error();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_state64>(),
        168usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_thread_state64))
    );
    fn test_field___rax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rax) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rax)
            )
        );
    }
    test_field___rax();
    fn test_field___rbx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rbx) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rbx)
            )
        );
    }
    test_field___rbx();
    fn test_field___rcx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rcx) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rcx)
            )
        );
    }
    test_field___rcx();
    fn test_field___rdx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rdx) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rdx)
            )
        );
    }
    test_field___rdx();
    fn test_field___rdi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rdi) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rdi)
            )
        );
    }
    test_field___rdi();
    fn test_field___rsi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rsi) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rsi)
            )
        );
    }
    test_field___rsi();
    fn test_field___rbp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rbp) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rbp)
            )
        );
    }
    test_field___rbp();
    fn test_field___rsp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rsp) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rsp)
            )
        );
    }
    test_field___rsp();
    fn test_field___r8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r8) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r8)
            )
        );
    }
    test_field___r8();
    fn test_field___r9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r9) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r9)
            )
        );
    }
    test_field___r9();
    fn test_field___r10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r10) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r10)
            )
        );
    }
    test_field___r10();
    fn test_field___r11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r11) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r11)
            )
        );
    }
    test_field___r11();
    fn test_field___r12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r12) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r12)
            )
        );
    }
    test_field___r12();
    fn test_field___r13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r13) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r13)
            )
        );
    }
    test_field___r13();
    fn test_field___r14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r14) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r14)
            )
        );
    }
    test_field___r14();
    fn test_field___r15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r15) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r15)
            )
        );
    }
    test_field___r15();
    fn test_field___rip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rip) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rip)
            )
        );
    }
    test_field___rip();
    fn test_field___rflags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rflags) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rflags)
            )
        );
    }
    test_field___rflags();
    fn test_field___cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__cs) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__cs)
            )
        );
    }
    test_field___cs();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
    fn test_field___gs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__gs) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__gs)
            )
        );
    }
    test_field___gs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_full_state64 {
    pub __ss64: __darwin_x86_thread_state64,
    pub __ds: __uint64_t,
    pub __es: __uint64_t,
    pub __ss: __uint64_t,
    pub __gsbase: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_full_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_full_state64>(),
        200usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_full_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_full_state64>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__darwin_x86_thread_full_state64)
        )
    );
    fn test_field___ss64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_full_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss64) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_full_state64),
                "::",
                stringify!(__ss64)
            )
        );
    }
    test_field___ss64();
    fn test_field___ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_full_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ds) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_full_state64),
                "::",
                stringify!(__ds)
            )
        );
    }
    test_field___ds();
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_full_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_full_state64),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_full_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_full_state64),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___gsbase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_full_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__gsbase) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_full_state64),
                "::",
                stringify!(__gsbase)
            )
        );
    }
    test_field___gsbase();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_x86_float_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_float_state64>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_float_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_float_state64))
    );
    fn test_field___fpu_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_reserved)
            )
        );
    }
    test_field___fpu_reserved();
    fn test_field___fpu_fcw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_fcw)
            )
        );
    }
    test_field___fpu_fcw();
    fn test_field___fpu_fsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_fsw)
            )
        );
    }
    test_field___fpu_fsw();
    fn test_field___fpu_ftw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_ftw)
            )
        );
    }
    test_field___fpu_ftw();
    fn test_field___fpu_rsrv1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_rsrv1)
            )
        );
    }
    test_field___fpu_rsrv1();
    fn test_field___fpu_fop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_fop)
            )
        );
    }
    test_field___fpu_fop();
    fn test_field___fpu_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_ip)
            )
        );
    }
    test_field___fpu_ip();
    fn test_field___fpu_cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_cs)
            )
        );
    }
    test_field___fpu_cs();
    fn test_field___fpu_rsrv2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_rsrv2)
            )
        );
    }
    test_field___fpu_rsrv2();
    fn test_field___fpu_dp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_dp)
            )
        );
    }
    test_field___fpu_dp();
    fn test_field___fpu_ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_ds)
            )
        );
    }
    test_field___fpu_ds();
    fn test_field___fpu_rsrv3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_rsrv3)
            )
        );
    }
    test_field___fpu_rsrv3();
    fn test_field___fpu_mxcsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_mxcsr)
            )
        );
    }
    test_field___fpu_mxcsr();
    fn test_field___fpu_mxcsrmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_mxcsrmask)
            )
        );
    }
    test_field___fpu_mxcsrmask();
    fn test_field___fpu_stmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm0)
            )
        );
    }
    test_field___fpu_stmm0();
    fn test_field___fpu_stmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm1)
            )
        );
    }
    test_field___fpu_stmm1();
    fn test_field___fpu_stmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm2)
            )
        );
    }
    test_field___fpu_stmm2();
    fn test_field___fpu_stmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm3)
            )
        );
    }
    test_field___fpu_stmm3();
    fn test_field___fpu_stmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm4)
            )
        );
    }
    test_field___fpu_stmm4();
    fn test_field___fpu_stmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm5)
            )
        );
    }
    test_field___fpu_stmm5();
    fn test_field___fpu_stmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm6)
            )
        );
    }
    test_field___fpu_stmm6();
    fn test_field___fpu_stmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm7)
            )
        );
    }
    test_field___fpu_stmm7();
    fn test_field___fpu_xmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm0)
            )
        );
    }
    test_field___fpu_xmm0();
    fn test_field___fpu_xmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm1)
            )
        );
    }
    test_field___fpu_xmm1();
    fn test_field___fpu_xmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm2)
            )
        );
    }
    test_field___fpu_xmm2();
    fn test_field___fpu_xmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm3)
            )
        );
    }
    test_field___fpu_xmm3();
    fn test_field___fpu_xmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm4)
            )
        );
    }
    test_field___fpu_xmm4();
    fn test_field___fpu_xmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm5)
            )
        );
    }
    test_field___fpu_xmm5();
    fn test_field___fpu_xmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm6)
            )
        );
    }
    test_field___fpu_xmm6();
    fn test_field___fpu_xmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm7)
            )
        );
    }
    test_field___fpu_xmm7();
    fn test_field___fpu_xmm8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm8) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm8)
            )
        );
    }
    test_field___fpu_xmm8();
    fn test_field___fpu_xmm9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm9) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm9)
            )
        );
    }
    test_field___fpu_xmm9();
    fn test_field___fpu_xmm10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm10) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm10)
            )
        );
    }
    test_field___fpu_xmm10();
    fn test_field___fpu_xmm11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm11) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm11)
            )
        );
    }
    test_field___fpu_xmm11();
    fn test_field___fpu_xmm12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm12) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm12)
            )
        );
    }
    test_field___fpu_xmm12();
    fn test_field___fpu_xmm13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm13) as usize - ptr as usize
            },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm13)
            )
        );
    }
    test_field___fpu_xmm13();
    fn test_field___fpu_xmm14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm14) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm14)
            )
        );
    }
    test_field___fpu_xmm14();
    fn test_field___fpu_xmm15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm15) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm15)
            )
        );
    }
    test_field___fpu_xmm15();
    fn test_field___fpu_rsrv4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_rsrv4)
            )
        );
    }
    test_field___fpu_rsrv4();
    fn test_field___fpu_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_reserved1)
            )
        );
    }
    test_field___fpu_reserved1();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx_state64>(),
        844usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx_state64))
    );
    fn test_field___fpu_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_reserved)
            )
        );
    }
    test_field___fpu_reserved();
    fn test_field___fpu_fcw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_fcw)
            )
        );
    }
    test_field___fpu_fcw();
    fn test_field___fpu_fsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_fsw)
            )
        );
    }
    test_field___fpu_fsw();
    fn test_field___fpu_ftw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ftw)
            )
        );
    }
    test_field___fpu_ftw();
    fn test_field___fpu_rsrv1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_rsrv1)
            )
        );
    }
    test_field___fpu_rsrv1();
    fn test_field___fpu_fop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_fop)
            )
        );
    }
    test_field___fpu_fop();
    fn test_field___fpu_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ip)
            )
        );
    }
    test_field___fpu_ip();
    fn test_field___fpu_cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_cs)
            )
        );
    }
    test_field___fpu_cs();
    fn test_field___fpu_rsrv2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_rsrv2)
            )
        );
    }
    test_field___fpu_rsrv2();
    fn test_field___fpu_dp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_dp)
            )
        );
    }
    test_field___fpu_dp();
    fn test_field___fpu_ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ds)
            )
        );
    }
    test_field___fpu_ds();
    fn test_field___fpu_rsrv3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_rsrv3)
            )
        );
    }
    test_field___fpu_rsrv3();
    fn test_field___fpu_mxcsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_mxcsr)
            )
        );
    }
    test_field___fpu_mxcsr();
    fn test_field___fpu_mxcsrmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_mxcsrmask)
            )
        );
    }
    test_field___fpu_mxcsrmask();
    fn test_field___fpu_stmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm0)
            )
        );
    }
    test_field___fpu_stmm0();
    fn test_field___fpu_stmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm1)
            )
        );
    }
    test_field___fpu_stmm1();
    fn test_field___fpu_stmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm2)
            )
        );
    }
    test_field___fpu_stmm2();
    fn test_field___fpu_stmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm3)
            )
        );
    }
    test_field___fpu_stmm3();
    fn test_field___fpu_stmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm4)
            )
        );
    }
    test_field___fpu_stmm4();
    fn test_field___fpu_stmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm5)
            )
        );
    }
    test_field___fpu_stmm5();
    fn test_field___fpu_stmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm6)
            )
        );
    }
    test_field___fpu_stmm6();
    fn test_field___fpu_stmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm7)
            )
        );
    }
    test_field___fpu_stmm7();
    fn test_field___fpu_xmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm0)
            )
        );
    }
    test_field___fpu_xmm0();
    fn test_field___fpu_xmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm1)
            )
        );
    }
    test_field___fpu_xmm1();
    fn test_field___fpu_xmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm2)
            )
        );
    }
    test_field___fpu_xmm2();
    fn test_field___fpu_xmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm3)
            )
        );
    }
    test_field___fpu_xmm3();
    fn test_field___fpu_xmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm4)
            )
        );
    }
    test_field___fpu_xmm4();
    fn test_field___fpu_xmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm5)
            )
        );
    }
    test_field___fpu_xmm5();
    fn test_field___fpu_xmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm6)
            )
        );
    }
    test_field___fpu_xmm6();
    fn test_field___fpu_xmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm7)
            )
        );
    }
    test_field___fpu_xmm7();
    fn test_field___fpu_xmm8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm8) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm8)
            )
        );
    }
    test_field___fpu_xmm8();
    fn test_field___fpu_xmm9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm9) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm9)
            )
        );
    }
    test_field___fpu_xmm9();
    fn test_field___fpu_xmm10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm10) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm10)
            )
        );
    }
    test_field___fpu_xmm10();
    fn test_field___fpu_xmm11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm11) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm11)
            )
        );
    }
    test_field___fpu_xmm11();
    fn test_field___fpu_xmm12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm12) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm12)
            )
        );
    }
    test_field___fpu_xmm12();
    fn test_field___fpu_xmm13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm13) as usize - ptr as usize
            },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm13)
            )
        );
    }
    test_field___fpu_xmm13();
    fn test_field___fpu_xmm14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm14) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm14)
            )
        );
    }
    test_field___fpu_xmm14();
    fn test_field___fpu_xmm15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm15) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm15)
            )
        );
    }
    test_field___fpu_xmm15();
    fn test_field___fpu_rsrv4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_rsrv4)
            )
        );
    }
    test_field___fpu_rsrv4();
    fn test_field___fpu_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_reserved1)
            )
        );
    }
    test_field___fpu_reserved1();
    fn test_field___avx_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize
            },
            524usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__avx_reserved1)
            )
        );
    }
    test_field___avx_reserved1();
    fn test_field___fpu_ymmh0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize
            },
            588usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh0)
            )
        );
    }
    test_field___fpu_ymmh0();
    fn test_field___fpu_ymmh1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize
            },
            604usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh1)
            )
        );
    }
    test_field___fpu_ymmh1();
    fn test_field___fpu_ymmh2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize
            },
            620usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh2)
            )
        );
    }
    test_field___fpu_ymmh2();
    fn test_field___fpu_ymmh3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize
            },
            636usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh3)
            )
        );
    }
    test_field___fpu_ymmh3();
    fn test_field___fpu_ymmh4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize
            },
            652usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh4)
            )
        );
    }
    test_field___fpu_ymmh4();
    fn test_field___fpu_ymmh5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize
            },
            668usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh5)
            )
        );
    }
    test_field___fpu_ymmh5();
    fn test_field___fpu_ymmh6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize
            },
            684usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh6)
            )
        );
    }
    test_field___fpu_ymmh6();
    fn test_field___fpu_ymmh7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize
            },
            700usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh7)
            )
        );
    }
    test_field___fpu_ymmh7();
    fn test_field___fpu_ymmh8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh8) as usize - ptr as usize
            },
            716usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh8)
            )
        );
    }
    test_field___fpu_ymmh8();
    fn test_field___fpu_ymmh9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh9) as usize - ptr as usize
            },
            732usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh9)
            )
        );
    }
    test_field___fpu_ymmh9();
    fn test_field___fpu_ymmh10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh10) as usize - ptr as usize
            },
            748usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh10)
            )
        );
    }
    test_field___fpu_ymmh10();
    fn test_field___fpu_ymmh11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh11) as usize - ptr as usize
            },
            764usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh11)
            )
        );
    }
    test_field___fpu_ymmh11();
    fn test_field___fpu_ymmh12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh12) as usize - ptr as usize
            },
            780usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh12)
            )
        );
    }
    test_field___fpu_ymmh12();
    fn test_field___fpu_ymmh13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh13) as usize - ptr as usize
            },
            796usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh13)
            )
        );
    }
    test_field___fpu_ymmh13();
    fn test_field___fpu_ymmh14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh14) as usize - ptr as usize
            },
            812usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh14)
            )
        );
    }
    test_field___fpu_ymmh14();
    fn test_field___fpu_ymmh15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh15) as usize - ptr as usize
            },
            828usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh15)
            )
        );
    }
    test_field___fpu_ymmh15();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx512_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
    pub __fpu_zmmh8: __darwin_ymm_reg,
    pub __fpu_zmmh9: __darwin_ymm_reg,
    pub __fpu_zmmh10: __darwin_ymm_reg,
    pub __fpu_zmmh11: __darwin_ymm_reg,
    pub __fpu_zmmh12: __darwin_ymm_reg,
    pub __fpu_zmmh13: __darwin_ymm_reg,
    pub __fpu_zmmh14: __darwin_ymm_reg,
    pub __fpu_zmmh15: __darwin_ymm_reg,
    pub __fpu_zmm16: __darwin_zmm_reg,
    pub __fpu_zmm17: __darwin_zmm_reg,
    pub __fpu_zmm18: __darwin_zmm_reg,
    pub __fpu_zmm19: __darwin_zmm_reg,
    pub __fpu_zmm20: __darwin_zmm_reg,
    pub __fpu_zmm21: __darwin_zmm_reg,
    pub __fpu_zmm22: __darwin_zmm_reg,
    pub __fpu_zmm23: __darwin_zmm_reg,
    pub __fpu_zmm24: __darwin_zmm_reg,
    pub __fpu_zmm25: __darwin_zmm_reg,
    pub __fpu_zmm26: __darwin_zmm_reg,
    pub __fpu_zmm27: __darwin_zmm_reg,
    pub __fpu_zmm28: __darwin_zmm_reg,
    pub __fpu_zmm29: __darwin_zmm_reg,
    pub __fpu_zmm30: __darwin_zmm_reg,
    pub __fpu_zmm31: __darwin_zmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx512_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx512_state64>(),
        2444usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx512_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx512_state64))
    );
    fn test_field___fpu_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_reserved)
            )
        );
    }
    test_field___fpu_reserved();
    fn test_field___fpu_fcw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_fcw)
            )
        );
    }
    test_field___fpu_fcw();
    fn test_field___fpu_fsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_fsw)
            )
        );
    }
    test_field___fpu_fsw();
    fn test_field___fpu_ftw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ftw)
            )
        );
    }
    test_field___fpu_ftw();
    fn test_field___fpu_rsrv1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_rsrv1)
            )
        );
    }
    test_field___fpu_rsrv1();
    fn test_field___fpu_fop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_fop)
            )
        );
    }
    test_field___fpu_fop();
    fn test_field___fpu_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ip)
            )
        );
    }
    test_field___fpu_ip();
    fn test_field___fpu_cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_cs)
            )
        );
    }
    test_field___fpu_cs();
    fn test_field___fpu_rsrv2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_rsrv2)
            )
        );
    }
    test_field___fpu_rsrv2();
    fn test_field___fpu_dp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_dp)
            )
        );
    }
    test_field___fpu_dp();
    fn test_field___fpu_ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ds)
            )
        );
    }
    test_field___fpu_ds();
    fn test_field___fpu_rsrv3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_rsrv3)
            )
        );
    }
    test_field___fpu_rsrv3();
    fn test_field___fpu_mxcsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_mxcsr)
            )
        );
    }
    test_field___fpu_mxcsr();
    fn test_field___fpu_mxcsrmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_mxcsrmask)
            )
        );
    }
    test_field___fpu_mxcsrmask();
    fn test_field___fpu_stmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm0)
            )
        );
    }
    test_field___fpu_stmm0();
    fn test_field___fpu_stmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm1)
            )
        );
    }
    test_field___fpu_stmm1();
    fn test_field___fpu_stmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm2)
            )
        );
    }
    test_field___fpu_stmm2();
    fn test_field___fpu_stmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm3)
            )
        );
    }
    test_field___fpu_stmm3();
    fn test_field___fpu_stmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm4)
            )
        );
    }
    test_field___fpu_stmm4();
    fn test_field___fpu_stmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm5)
            )
        );
    }
    test_field___fpu_stmm5();
    fn test_field___fpu_stmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm6)
            )
        );
    }
    test_field___fpu_stmm6();
    fn test_field___fpu_stmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm7)
            )
        );
    }
    test_field___fpu_stmm7();
    fn test_field___fpu_xmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm0)
            )
        );
    }
    test_field___fpu_xmm0();
    fn test_field___fpu_xmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm1)
            )
        );
    }
    test_field___fpu_xmm1();
    fn test_field___fpu_xmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm2)
            )
        );
    }
    test_field___fpu_xmm2();
    fn test_field___fpu_xmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm3)
            )
        );
    }
    test_field___fpu_xmm3();
    fn test_field___fpu_xmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm4)
            )
        );
    }
    test_field___fpu_xmm4();
    fn test_field___fpu_xmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm5)
            )
        );
    }
    test_field___fpu_xmm5();
    fn test_field___fpu_xmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm6)
            )
        );
    }
    test_field___fpu_xmm6();
    fn test_field___fpu_xmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm7)
            )
        );
    }
    test_field___fpu_xmm7();
    fn test_field___fpu_xmm8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm8) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm8)
            )
        );
    }
    test_field___fpu_xmm8();
    fn test_field___fpu_xmm9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm9) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm9)
            )
        );
    }
    test_field___fpu_xmm9();
    fn test_field___fpu_xmm10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm10) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm10)
            )
        );
    }
    test_field___fpu_xmm10();
    fn test_field___fpu_xmm11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm11) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm11)
            )
        );
    }
    test_field___fpu_xmm11();
    fn test_field___fpu_xmm12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm12) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm12)
            )
        );
    }
    test_field___fpu_xmm12();
    fn test_field___fpu_xmm13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm13) as usize - ptr as usize
            },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm13)
            )
        );
    }
    test_field___fpu_xmm13();
    fn test_field___fpu_xmm14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm14) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm14)
            )
        );
    }
    test_field___fpu_xmm14();
    fn test_field___fpu_xmm15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm15) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm15)
            )
        );
    }
    test_field___fpu_xmm15();
    fn test_field___fpu_rsrv4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_rsrv4)
            )
        );
    }
    test_field___fpu_rsrv4();
    fn test_field___fpu_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_reserved1)
            )
        );
    }
    test_field___fpu_reserved1();
    fn test_field___avx_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize
            },
            524usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__avx_reserved1)
            )
        );
    }
    test_field___avx_reserved1();
    fn test_field___fpu_ymmh0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize
            },
            588usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh0)
            )
        );
    }
    test_field___fpu_ymmh0();
    fn test_field___fpu_ymmh1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize
            },
            604usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh1)
            )
        );
    }
    test_field___fpu_ymmh1();
    fn test_field___fpu_ymmh2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize
            },
            620usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh2)
            )
        );
    }
    test_field___fpu_ymmh2();
    fn test_field___fpu_ymmh3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize
            },
            636usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh3)
            )
        );
    }
    test_field___fpu_ymmh3();
    fn test_field___fpu_ymmh4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize
            },
            652usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh4)
            )
        );
    }
    test_field___fpu_ymmh4();
    fn test_field___fpu_ymmh5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize
            },
            668usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh5)
            )
        );
    }
    test_field___fpu_ymmh5();
    fn test_field___fpu_ymmh6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize
            },
            684usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh6)
            )
        );
    }
    test_field___fpu_ymmh6();
    fn test_field___fpu_ymmh7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize
            },
            700usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh7)
            )
        );
    }
    test_field___fpu_ymmh7();
    fn test_field___fpu_ymmh8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh8) as usize - ptr as usize
            },
            716usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh8)
            )
        );
    }
    test_field___fpu_ymmh8();
    fn test_field___fpu_ymmh9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh9) as usize - ptr as usize
            },
            732usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh9)
            )
        );
    }
    test_field___fpu_ymmh9();
    fn test_field___fpu_ymmh10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh10) as usize - ptr as usize
            },
            748usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh10)
            )
        );
    }
    test_field___fpu_ymmh10();
    fn test_field___fpu_ymmh11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh11) as usize - ptr as usize
            },
            764usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh11)
            )
        );
    }
    test_field___fpu_ymmh11();
    fn test_field___fpu_ymmh12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh12) as usize - ptr as usize
            },
            780usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh12)
            )
        );
    }
    test_field___fpu_ymmh12();
    fn test_field___fpu_ymmh13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh13) as usize - ptr as usize
            },
            796usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh13)
            )
        );
    }
    test_field___fpu_ymmh13();
    fn test_field___fpu_ymmh14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh14) as usize - ptr as usize
            },
            812usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh14)
            )
        );
    }
    test_field___fpu_ymmh14();
    fn test_field___fpu_ymmh15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh15) as usize - ptr as usize
            },
            828usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh15)
            )
        );
    }
    test_field___fpu_ymmh15();
    fn test_field___fpu_k0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k0) as usize - ptr as usize
            },
            844usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k0)
            )
        );
    }
    test_field___fpu_k0();
    fn test_field___fpu_k1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k1) as usize - ptr as usize
            },
            852usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k1)
            )
        );
    }
    test_field___fpu_k1();
    fn test_field___fpu_k2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k2) as usize - ptr as usize
            },
            860usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k2)
            )
        );
    }
    test_field___fpu_k2();
    fn test_field___fpu_k3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k3) as usize - ptr as usize
            },
            868usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k3)
            )
        );
    }
    test_field___fpu_k3();
    fn test_field___fpu_k4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k4) as usize - ptr as usize
            },
            876usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k4)
            )
        );
    }
    test_field___fpu_k4();
    fn test_field___fpu_k5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k5) as usize - ptr as usize
            },
            884usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k5)
            )
        );
    }
    test_field___fpu_k5();
    fn test_field___fpu_k6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k6) as usize - ptr as usize
            },
            892usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k6)
            )
        );
    }
    test_field___fpu_k6();
    fn test_field___fpu_k7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k7) as usize - ptr as usize
            },
            900usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k7)
            )
        );
    }
    test_field___fpu_k7();
    fn test_field___fpu_zmmh0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh0) as usize - ptr as usize
            },
            908usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh0)
            )
        );
    }
    test_field___fpu_zmmh0();
    fn test_field___fpu_zmmh1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh1) as usize - ptr as usize
            },
            940usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh1)
            )
        );
    }
    test_field___fpu_zmmh1();
    fn test_field___fpu_zmmh2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh2) as usize - ptr as usize
            },
            972usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh2)
            )
        );
    }
    test_field___fpu_zmmh2();
    fn test_field___fpu_zmmh3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh3) as usize - ptr as usize
            },
            1004usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh3)
            )
        );
    }
    test_field___fpu_zmmh3();
    fn test_field___fpu_zmmh4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh4) as usize - ptr as usize
            },
            1036usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh4)
            )
        );
    }
    test_field___fpu_zmmh4();
    fn test_field___fpu_zmmh5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh5) as usize - ptr as usize
            },
            1068usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh5)
            )
        );
    }
    test_field___fpu_zmmh5();
    fn test_field___fpu_zmmh6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh6) as usize - ptr as usize
            },
            1100usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh6)
            )
        );
    }
    test_field___fpu_zmmh6();
    fn test_field___fpu_zmmh7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh7) as usize - ptr as usize
            },
            1132usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh7)
            )
        );
    }
    test_field___fpu_zmmh7();
    fn test_field___fpu_zmmh8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh8) as usize - ptr as usize
            },
            1164usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh8)
            )
        );
    }
    test_field___fpu_zmmh8();
    fn test_field___fpu_zmmh9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh9) as usize - ptr as usize
            },
            1196usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh9)
            )
        );
    }
    test_field___fpu_zmmh9();
    fn test_field___fpu_zmmh10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh10) as usize - ptr as usize
            },
            1228usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh10)
            )
        );
    }
    test_field___fpu_zmmh10();
    fn test_field___fpu_zmmh11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh11) as usize - ptr as usize
            },
            1260usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh11)
            )
        );
    }
    test_field___fpu_zmmh11();
    fn test_field___fpu_zmmh12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh12) as usize - ptr as usize
            },
            1292usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh12)
            )
        );
    }
    test_field___fpu_zmmh12();
    fn test_field___fpu_zmmh13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh13) as usize - ptr as usize
            },
            1324usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh13)
            )
        );
    }
    test_field___fpu_zmmh13();
    fn test_field___fpu_zmmh14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh14) as usize - ptr as usize
            },
            1356usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh14)
            )
        );
    }
    test_field___fpu_zmmh14();
    fn test_field___fpu_zmmh15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh15) as usize - ptr as usize
            },
            1388usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh15)
            )
        );
    }
    test_field___fpu_zmmh15();
    fn test_field___fpu_zmm16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm16) as usize - ptr as usize
            },
            1420usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm16)
            )
        );
    }
    test_field___fpu_zmm16();
    fn test_field___fpu_zmm17() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm17) as usize - ptr as usize
            },
            1484usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm17)
            )
        );
    }
    test_field___fpu_zmm17();
    fn test_field___fpu_zmm18() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm18) as usize - ptr as usize
            },
            1548usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm18)
            )
        );
    }
    test_field___fpu_zmm18();
    fn test_field___fpu_zmm19() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm19) as usize - ptr as usize
            },
            1612usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm19)
            )
        );
    }
    test_field___fpu_zmm19();
    fn test_field___fpu_zmm20() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm20) as usize - ptr as usize
            },
            1676usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm20)
            )
        );
    }
    test_field___fpu_zmm20();
    fn test_field___fpu_zmm21() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm21) as usize - ptr as usize
            },
            1740usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm21)
            )
        );
    }
    test_field___fpu_zmm21();
    fn test_field___fpu_zmm22() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm22) as usize - ptr as usize
            },
            1804usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm22)
            )
        );
    }
    test_field___fpu_zmm22();
    fn test_field___fpu_zmm23() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm23) as usize - ptr as usize
            },
            1868usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm23)
            )
        );
    }
    test_field___fpu_zmm23();
    fn test_field___fpu_zmm24() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm24) as usize - ptr as usize
            },
            1932usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm24)
            )
        );
    }
    test_field___fpu_zmm24();
    fn test_field___fpu_zmm25() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm25) as usize - ptr as usize
            },
            1996usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm25)
            )
        );
    }
    test_field___fpu_zmm25();
    fn test_field___fpu_zmm26() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm26) as usize - ptr as usize
            },
            2060usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm26)
            )
        );
    }
    test_field___fpu_zmm26();
    fn test_field___fpu_zmm27() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm27) as usize - ptr as usize
            },
            2124usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm27)
            )
        );
    }
    test_field___fpu_zmm27();
    fn test_field___fpu_zmm28() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm28) as usize - ptr as usize
            },
            2188usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm28)
            )
        );
    }
    test_field___fpu_zmm28();
    fn test_field___fpu_zmm29() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm29) as usize - ptr as usize
            },
            2252usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm29)
            )
        );
    }
    test_field___fpu_zmm29();
    fn test_field___fpu_zmm30() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm30) as usize - ptr as usize
            },
            2316usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm30)
            )
        );
    }
    test_field___fpu_zmm30();
    fn test_field___fpu_zmm31() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm31) as usize - ptr as usize
            },
            2380usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm31)
            )
        );
    }
    test_field___fpu_zmm31();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_exception_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_exception_state64>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_exception_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_exception_state64))
    );
    fn test_field___trapno() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_exception_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__trapno) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_exception_state64),
                "::",
                stringify!(__trapno)
            )
        );
    }
    test_field___trapno();
    fn test_field___cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_exception_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__cpu) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_exception_state64),
                "::",
                stringify!(__cpu)
            )
        );
    }
    test_field___cpu();
    fn test_field___err() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_exception_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__err) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_exception_state64),
                "::",
                stringify!(__err)
            )
        );
    }
    test_field___err();
    fn test_field___faultvaddr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_exception_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__faultvaddr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_exception_state64),
                "::",
                stringify!(__faultvaddr)
            )
        );
    }
    test_field___faultvaddr();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state64>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state64))
    );
    fn test_field___dr0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr0)
            )
        );
    }
    test_field___dr0();
    fn test_field___dr1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr1)
            )
        );
    }
    test_field___dr1();
    fn test_field___dr2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr2)
            )
        );
    }
    test_field___dr2();
    fn test_field___dr3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr3) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr3)
            )
        );
    }
    test_field___dr3();
    fn test_field___dr4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr4) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr4)
            )
        );
    }
    test_field___dr4();
    fn test_field___dr5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr5) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr5)
            )
        );
    }
    test_field___dr5();
    fn test_field___dr6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr6) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr6)
            )
        );
    }
    test_field___dr6();
    fn test_field___dr7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr7) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr7)
            )
        );
    }
    test_field___dr7();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_x86_cpmu_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_cpmu_state64>(),
        128usize,
        concat!("Size of: ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_cpmu_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_cpmu_state64))
    );
    fn test_field___ctrs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_cpmu_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ctrs) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_cpmu_state64),
                "::",
                stringify!(__ctrs)
            )
        );
    }
    test_field___ctrs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_float_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext32>(),
        600usize,
        concat!("Size of: ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext32))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext32),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext32),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext32),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx32>(),
        792usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx32))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx32),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx32),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx32),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx512_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_32>(),
        1112usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_32))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_32),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_32),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_32),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64>(),
        712usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext64),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext64),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext64),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64_full() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64_full>(),
        744usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64_full>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64_full))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext64_full),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext64_full),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext64_full),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx64>(),
        1032usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx64))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx64),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx64),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx64),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64_full() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx64_full>(),
        1064usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx64_full>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx64_full))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx64_full),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx64_full),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx64_full),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_64>(),
        2632usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_64))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_64),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_64),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_64),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_64_full() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_64_full>(),
        2664usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_64_full>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__darwin_mcontext_avx512_64_full)
        )
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_64_full),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_64_full),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_64_full),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
pub type mcontext_t = *mut __darwin_mcontext64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_sigaltstack() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_sigaltstack>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_sigaltstack>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_sigaltstack))
    );
    fn test_field_ss_sp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_sigaltstack>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_sigaltstack),
                "::",
                stringify!(ss_sp)
            )
        );
    }
    test_field_ss_sp();
    fn test_field_ss_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_sigaltstack>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ss_size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_sigaltstack),
                "::",
                stringify!(ss_size)
            )
        );
    }
    test_field_ss_size();
    fn test_field_ss_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_sigaltstack>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ss_flags) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_sigaltstack),
                "::",
                stringify!(ss_flags)
            )
        );
    }
    test_field_ss_flags();
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[test]
fn bindgen_test_layout___darwin_ucontext() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_ucontext>(),
        56usize,
        concat!("Size of: ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_ucontext))
    );
    fn test_field_uc_onstack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uc_onstack) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ucontext),
                "::",
                stringify!(uc_onstack)
            )
        );
    }
    test_field_uc_onstack();
    fn test_field_uc_sigmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uc_sigmask) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ucontext),
                "::",
                stringify!(uc_sigmask)
            )
        );
    }
    test_field_uc_sigmask();
    fn test_field_uc_stack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uc_stack) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ucontext),
                "::",
                stringify!(uc_stack)
            )
        );
    }
    test_field_uc_stack();
    fn test_field_uc_link() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uc_link) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ucontext),
                "::",
                stringify!(uc_link)
            )
        );
    }
    test_field_uc_link();
    fn test_field_uc_mcsize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uc_mcsize) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ucontext),
                "::",
                stringify!(uc_mcsize)
            )
        );
    }
    test_field_uc_mcsize();
    fn test_field_uc_mcontext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uc_mcontext) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ucontext),
                "::",
                stringify!(uc_mcontext)
            )
        );
    }
    test_field_uc_mcontext();
}
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    fn test_field_sival_int() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigval>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sival_int) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigval),
                "::",
                stringify!(sival_int)
            )
        );
    }
    test_field_sival_int();
    fn test_field_sival_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigval>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sival_ptr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigval),
                "::",
                stringify!(sival_ptr)
            )
        );
    }
    test_field_sival_ptr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        32usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    fn test_field_sigev_notify() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigev_notify) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent),
                "::",
                stringify!(sigev_notify)
            )
        );
    }
    test_field_sigev_notify();
    fn test_field_sigev_signo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigev_signo) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent),
                "::",
                stringify!(sigev_signo)
            )
        );
    }
    test_field_sigev_signo();
    fn test_field_sigev_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigev_value) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent),
                "::",
                stringify!(sigev_value)
            )
        );
    }
    test_field_sigev_value();
    fn test_field_sigev_notify_function() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigev_notify_function) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent),
                "::",
                stringify!(sigev_notify_function)
            )
        );
    }
    test_field_sigev_notify_function();
    fn test_field_sigev_notify_attributes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigev_notify_attributes) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent),
                "::",
                stringify!(sigev_notify_attributes)
            )
        );
    }
    test_field_sigev_notify_attributes();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[test]
fn bindgen_test_layout___siginfo() {
    assert_eq!(
        ::std::mem::size_of::<__siginfo>(),
        104usize,
        concat!("Size of: ", stringify!(__siginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(__siginfo))
    );
    fn test_field_si_signo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_signo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_signo)
            )
        );
    }
    test_field_si_signo();
    fn test_field_si_errno() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_errno) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_errno)
            )
        );
    }
    test_field_si_errno();
    fn test_field_si_code() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_code) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_code)
            )
        );
    }
    test_field_si_code();
    fn test_field_si_pid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_pid)
            )
        );
    }
    test_field_si_pid();
    fn test_field_si_uid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_uid)
            )
        );
    }
    test_field_si_uid();
    fn test_field_si_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_status) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_status)
            )
        );
    }
    test_field_si_status();
    fn test_field_si_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_addr) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_addr)
            )
        );
    }
    test_field_si_addr();
    fn test_field_si_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_value) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_value)
            )
        );
    }
    test_field_si_value();
    fn test_field_si_band() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_band) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_band)
            )
        );
    }
    test_field_si_band();
    fn test_field___pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(__pad)
            )
        );
    }
    test_field___pad();
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout___sigaction_u() {
    assert_eq!(
        ::std::mem::size_of::<__sigaction_u>(),
        8usize,
        concat!("Size of: ", stringify!(__sigaction_u))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction_u>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction_u))
    );
    fn test_field___sa_handler() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigaction_u>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sa_handler) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigaction_u),
                "::",
                stringify!(__sa_handler)
            )
        );
    }
    test_field___sa_handler();
    fn test_field___sa_sigaction() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigaction_u>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sa_sigaction) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigaction_u),
                "::",
                stringify!(__sa_sigaction)
            )
        );
    }
    test_field___sa_sigaction();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sigaction() {
    assert_eq!(
        ::std::mem::size_of::<__sigaction>(),
        24usize,
        concat!("Size of: ", stringify!(__sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction))
    );
    fn test_field___sigaction_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sigaction_u) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigaction),
                "::",
                stringify!(__sigaction_u)
            )
        );
    }
    test_field___sigaction_u();
    fn test_field_sa_tramp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa_tramp) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigaction),
                "::",
                stringify!(sa_tramp)
            )
        );
    }
    test_field_sa_tramp();
    fn test_field_sa_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigaction),
                "::",
                stringify!(sa_mask)
            )
        );
    }
    test_field_sa_mask();
    fn test_field_sa_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigaction),
                "::",
                stringify!(sa_flags)
            )
        );
    }
    test_field_sa_flags();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        16usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    fn test_field___sigaction_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sigaction_u) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigaction),
                "::",
                stringify!(__sigaction_u)
            )
        );
    }
    test_field___sigaction_u();
    fn test_field_sa_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sigaction),
                "::",
                stringify!(sa_mask)
            )
        );
    }
    test_field_sa_mask();
    fn test_field_sa_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(sigaction),
                "::",
                stringify!(sa_flags)
            )
        );
    }
    test_field_sa_flags();
}
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigvec() {
    assert_eq!(
        ::std::mem::size_of::<sigvec>(),
        16usize,
        concat!("Size of: ", stringify!(sigvec))
    );
    assert_eq!(
        ::std::mem::align_of::<sigvec>(),
        8usize,
        concat!("Alignment of ", stringify!(sigvec))
    );
    fn test_field_sv_handler() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigvec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sv_handler) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigvec),
                "::",
                stringify!(sv_handler)
            )
        );
    }
    test_field_sv_handler();
    fn test_field_sv_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigvec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sv_mask) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sigvec),
                "::",
                stringify!(sv_mask)
            )
        );
    }
    test_field_sv_mask();
    fn test_field_sv_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigvec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sv_flags) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(sigvec),
                "::",
                stringify!(sv_flags)
            )
        );
    }
    test_field_sv_flags();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    fn test_field_ss_sp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigstack>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigstack),
                "::",
                stringify!(ss_sp)
            )
        );
    }
    test_field_ss_sp();
    fn test_field_ss_onstack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigstack>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ss_onstack) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sigstack),
                "::",
                stringify!(ss_onstack)
            )
        );
    }
    test_field_ss_onstack();
}
extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
pub type uchar_t = u8;
pub type ushort_t = u16;
pub type uint_t = u32;
pub type ulong_t = ::std::os::raw::c_ulong;
pub type u_longlong_t = u64;
pub type longlong_t = i64;
pub type off64_t = i64;
pub type processorid_t = ::std::os::raw::c_int;
pub type hrtime_t = i64;
pub const _dtrace_boolean_B_FALSE: _dtrace_boolean = 0;
pub const _dtrace_boolean_B_TRUE: _dtrace_boolean = 1;
pub type _dtrace_boolean = ::std::os::raw::c_uint;
pub type UUID = [u8; 16usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct modctl {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winsize {
    pub ws_row: ::std::os::raw::c_ushort,
    pub ws_col: ::std::os::raw::c_ushort,
    pub ws_xpixel: ::std::os::raw::c_ushort,
    pub ws_ypixel: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_winsize() {
    assert_eq!(
        ::std::mem::size_of::<winsize>(),
        8usize,
        concat!("Size of: ", stringify!(winsize))
    );
    assert_eq!(
        ::std::mem::align_of::<winsize>(),
        2usize,
        concat!("Alignment of ", stringify!(winsize))
    );
    fn test_field_ws_row() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<winsize>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ws_row) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(winsize),
                "::",
                stringify!(ws_row)
            )
        );
    }
    test_field_ws_row();
    fn test_field_ws_col() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<winsize>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ws_col) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(winsize),
                "::",
                stringify!(ws_col)
            )
        );
    }
    test_field_ws_col();
    fn test_field_ws_xpixel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<winsize>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ws_xpixel) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(winsize),
                "::",
                stringify!(ws_xpixel)
            )
        );
    }
    test_field_ws_xpixel();
    fn test_field_ws_ypixel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<winsize>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ws_ypixel) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(winsize),
                "::",
                stringify!(ws_ypixel)
            )
        );
    }
    test_field_ws_ypixel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ttysize {
    pub ts_lines: ::std::os::raw::c_ushort,
    pub ts_cols: ::std::os::raw::c_ushort,
    pub ts_xxx: ::std::os::raw::c_ushort,
    pub ts_yyy: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_ttysize() {
    assert_eq!(
        ::std::mem::size_of::<ttysize>(),
        8usize,
        concat!("Size of: ", stringify!(ttysize))
    );
    assert_eq!(
        ::std::mem::align_of::<ttysize>(),
        2usize,
        concat!("Alignment of ", stringify!(ttysize))
    );
    fn test_field_ts_lines() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ttysize>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ts_lines) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ttysize),
                "::",
                stringify!(ts_lines)
            )
        );
    }
    test_field_ts_lines();
    fn test_field_ts_cols() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ttysize>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ts_cols) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(ttysize),
                "::",
                stringify!(ts_cols)
            )
        );
    }
    test_field_ts_cols();
    fn test_field_ts_xxx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ttysize>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ts_xxx) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ttysize),
                "::",
                stringify!(ts_xxx)
            )
        );
    }
    test_field_ts_xxx();
    fn test_field_ts_yyy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ttysize>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ts_yyy) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(ttysize),
                "::",
                stringify!(ts_yyy)
            )
        );
    }
    test_field_ts_yyy();
}
extern "C" {
    pub fn ioctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctf_file {
    _unused: [u8; 0],
}
pub type ctf_file_t = ctf_file;
pub type ctf_id_t = ::std::os::raw::c_long;
pub type zoneid_t = u32;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type __va_list = va_list;
pub type os_function_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type os_block_t = *mut ::std::os::raw::c_void;
pub type dtrace_id_t = u32;
pub type dtrace_epid_t = u32;
pub type dtrace_aggid_t = u32;
pub type dtrace_aggvarid_t = i64;
pub type dtrace_actkind_t = u16;
pub type dtrace_optval_t = i64;
pub type dtrace_cacheid_t = u32;
pub const dtrace_probespec_DTRACE_PROBESPEC_NONE: dtrace_probespec = -1;
pub const dtrace_probespec_DTRACE_PROBESPEC_PROVIDER: dtrace_probespec = 0;
pub const dtrace_probespec_DTRACE_PROBESPEC_MOD: dtrace_probespec = 1;
pub const dtrace_probespec_DTRACE_PROBESPEC_FUNC: dtrace_probespec = 2;
pub const dtrace_probespec_DTRACE_PROBESPEC_NAME: dtrace_probespec = 3;
pub type dtrace_probespec = ::std::os::raw::c_int;
pub use self::dtrace_probespec as dtrace_probespec_t;
pub type dif_instr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_diftype {
    pub dtdt_kind: u8,
    pub dtdt_ckind: u8,
    pub dtdt_flags: u8,
    pub dtdt_pad: u8,
    pub dtdt_size: u32,
}
#[test]
fn bindgen_test_layout_dtrace_diftype() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_diftype>(),
        8usize,
        concat!("Size of: ", stringify!(dtrace_diftype))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_diftype>(),
        4usize,
        concat!("Alignment of ", stringify!(dtrace_diftype))
    );
    fn test_field_dtdt_kind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_diftype>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdt_kind) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_diftype),
                "::",
                stringify!(dtdt_kind)
            )
        );
    }
    test_field_dtdt_kind();
    fn test_field_dtdt_ckind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_diftype>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdt_ckind) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_diftype),
                "::",
                stringify!(dtdt_ckind)
            )
        );
    }
    test_field_dtdt_ckind();
    fn test_field_dtdt_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_diftype>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdt_flags) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_diftype),
                "::",
                stringify!(dtdt_flags)
            )
        );
    }
    test_field_dtdt_flags();
    fn test_field_dtdt_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_diftype>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdt_pad) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_diftype),
                "::",
                stringify!(dtdt_pad)
            )
        );
    }
    test_field_dtdt_pad();
    fn test_field_dtdt_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_diftype>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdt_size) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_diftype),
                "::",
                stringify!(dtdt_size)
            )
        );
    }
    test_field_dtdt_size();
}
pub type dtrace_diftype_t = dtrace_diftype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_difv {
    pub dtdv_name: u32,
    pub dtdv_id: u32,
    pub dtdv_kind: u8,
    pub dtdv_scope: u8,
    pub dtdv_flags: u16,
    pub dtdv_type: dtrace_diftype_t,
}
#[test]
fn bindgen_test_layout_dtrace_difv() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_difv>(),
        20usize,
        concat!("Size of: ", stringify!(dtrace_difv))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_difv>(),
        4usize,
        concat!("Alignment of ", stringify!(dtrace_difv))
    );
    fn test_field_dtdv_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difv>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdv_name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difv),
                "::",
                stringify!(dtdv_name)
            )
        );
    }
    test_field_dtdv_name();
    fn test_field_dtdv_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difv>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdv_id) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difv),
                "::",
                stringify!(dtdv_id)
            )
        );
    }
    test_field_dtdv_id();
    fn test_field_dtdv_kind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difv>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdv_kind) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difv),
                "::",
                stringify!(dtdv_kind)
            )
        );
    }
    test_field_dtdv_kind();
    fn test_field_dtdv_scope() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difv>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdv_scope) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difv),
                "::",
                stringify!(dtdv_scope)
            )
        );
    }
    test_field_dtdv_scope();
    fn test_field_dtdv_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difv>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdv_flags) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difv),
                "::",
                stringify!(dtdv_flags)
            )
        );
    }
    test_field_dtdv_flags();
    fn test_field_dtdv_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difv>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdv_type) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difv),
                "::",
                stringify!(dtdv_type)
            )
        );
    }
    test_field_dtdv_type();
}
pub type dtrace_difv_t = dtrace_difv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dof_hdr {
    pub dofh_ident: [u8; 16usize],
    pub dofh_flags: u32,
    pub dofh_hdrsize: u32,
    pub dofh_secsize: u32,
    pub dofh_secnum: u32,
    pub dofh_secoff: u64,
    pub dofh_loadsz: u64,
    pub dofh_filesz: u64,
    pub dofh_pad: u64,
}
#[test]
fn bindgen_test_layout_dof_hdr() {
    assert_eq!(
        ::std::mem::size_of::<dof_hdr>(),
        64usize,
        concat!("Size of: ", stringify!(dof_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<dof_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(dof_hdr))
    );
    fn test_field_dofh_ident() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofh_ident) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_hdr),
                "::",
                stringify!(dofh_ident)
            )
        );
    }
    test_field_dofh_ident();
    fn test_field_dofh_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofh_flags) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_hdr),
                "::",
                stringify!(dofh_flags)
            )
        );
    }
    test_field_dofh_flags();
    fn test_field_dofh_hdrsize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofh_hdrsize) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_hdr),
                "::",
                stringify!(dofh_hdrsize)
            )
        );
    }
    test_field_dofh_hdrsize();
    fn test_field_dofh_secsize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofh_secsize) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_hdr),
                "::",
                stringify!(dofh_secsize)
            )
        );
    }
    test_field_dofh_secsize();
    fn test_field_dofh_secnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofh_secnum) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_hdr),
                "::",
                stringify!(dofh_secnum)
            )
        );
    }
    test_field_dofh_secnum();
    fn test_field_dofh_secoff() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofh_secoff) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_hdr),
                "::",
                stringify!(dofh_secoff)
            )
        );
    }
    test_field_dofh_secoff();
    fn test_field_dofh_loadsz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofh_loadsz) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_hdr),
                "::",
                stringify!(dofh_loadsz)
            )
        );
    }
    test_field_dofh_loadsz();
    fn test_field_dofh_filesz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofh_filesz) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_hdr),
                "::",
                stringify!(dofh_filesz)
            )
        );
    }
    test_field_dofh_filesz();
    fn test_field_dofh_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofh_pad) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_hdr),
                "::",
                stringify!(dofh_pad)
            )
        );
    }
    test_field_dofh_pad();
}
pub type dof_hdr_t = dof_hdr;
pub type dof_secidx_t = u32;
pub type dof_stridx_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dof_sec {
    pub dofs_type: u32,
    pub dofs_align: u32,
    pub dofs_flags: u32,
    pub dofs_entsize: u32,
    pub dofs_offset: u64,
    pub dofs_size: u64,
}
#[test]
fn bindgen_test_layout_dof_sec() {
    assert_eq!(
        ::std::mem::size_of::<dof_sec>(),
        32usize,
        concat!("Size of: ", stringify!(dof_sec))
    );
    assert_eq!(
        ::std::mem::align_of::<dof_sec>(),
        8usize,
        concat!("Alignment of ", stringify!(dof_sec))
    );
    fn test_field_dofs_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_sec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofs_type) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_sec),
                "::",
                stringify!(dofs_type)
            )
        );
    }
    test_field_dofs_type();
    fn test_field_dofs_align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_sec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofs_align) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_sec),
                "::",
                stringify!(dofs_align)
            )
        );
    }
    test_field_dofs_align();
    fn test_field_dofs_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_sec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofs_flags) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_sec),
                "::",
                stringify!(dofs_flags)
            )
        );
    }
    test_field_dofs_flags();
    fn test_field_dofs_entsize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_sec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofs_entsize) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_sec),
                "::",
                stringify!(dofs_entsize)
            )
        );
    }
    test_field_dofs_entsize();
    fn test_field_dofs_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_sec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofs_offset) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_sec),
                "::",
                stringify!(dofs_offset)
            )
        );
    }
    test_field_dofs_offset();
    fn test_field_dofs_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_sec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofs_size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_sec),
                "::",
                stringify!(dofs_size)
            )
        );
    }
    test_field_dofs_size();
}
pub type dof_sec_t = dof_sec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dof_ecbdesc {
    pub dofe_probes: dof_secidx_t,
    pub dofe_pred: dof_secidx_t,
    pub dofe_actions: dof_secidx_t,
    pub dofe_pad: u32,
    pub dofe_uarg: u64,
}
#[test]
fn bindgen_test_layout_dof_ecbdesc() {
    assert_eq!(
        ::std::mem::size_of::<dof_ecbdesc>(),
        24usize,
        concat!("Size of: ", stringify!(dof_ecbdesc))
    );
    assert_eq!(
        ::std::mem::align_of::<dof_ecbdesc>(),
        8usize,
        concat!("Alignment of ", stringify!(dof_ecbdesc))
    );
    fn test_field_dofe_probes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_ecbdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofe_probes) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_ecbdesc),
                "::",
                stringify!(dofe_probes)
            )
        );
    }
    test_field_dofe_probes();
    fn test_field_dofe_pred() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_ecbdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofe_pred) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_ecbdesc),
                "::",
                stringify!(dofe_pred)
            )
        );
    }
    test_field_dofe_pred();
    fn test_field_dofe_actions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_ecbdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofe_actions) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_ecbdesc),
                "::",
                stringify!(dofe_actions)
            )
        );
    }
    test_field_dofe_actions();
    fn test_field_dofe_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_ecbdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofe_pad) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_ecbdesc),
                "::",
                stringify!(dofe_pad)
            )
        );
    }
    test_field_dofe_pad();
    fn test_field_dofe_uarg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_ecbdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofe_uarg) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_ecbdesc),
                "::",
                stringify!(dofe_uarg)
            )
        );
    }
    test_field_dofe_uarg();
}
pub type dof_ecbdesc_t = dof_ecbdesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dof_probedesc {
    pub dofp_strtab: dof_secidx_t,
    pub dofp_provider: dof_stridx_t,
    pub dofp_mod: dof_stridx_t,
    pub dofp_func: dof_stridx_t,
    pub dofp_name: dof_stridx_t,
    pub dofp_id: u32,
}
#[test]
fn bindgen_test_layout_dof_probedesc() {
    assert_eq!(
        ::std::mem::size_of::<dof_probedesc>(),
        24usize,
        concat!("Size of: ", stringify!(dof_probedesc))
    );
    assert_eq!(
        ::std::mem::align_of::<dof_probedesc>(),
        4usize,
        concat!("Alignment of ", stringify!(dof_probedesc))
    );
    fn test_field_dofp_strtab() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probedesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofp_strtab) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probedesc),
                "::",
                stringify!(dofp_strtab)
            )
        );
    }
    test_field_dofp_strtab();
    fn test_field_dofp_provider() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probedesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofp_provider) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probedesc),
                "::",
                stringify!(dofp_provider)
            )
        );
    }
    test_field_dofp_provider();
    fn test_field_dofp_mod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probedesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofp_mod) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probedesc),
                "::",
                stringify!(dofp_mod)
            )
        );
    }
    test_field_dofp_mod();
    fn test_field_dofp_func() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probedesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofp_func) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probedesc),
                "::",
                stringify!(dofp_func)
            )
        );
    }
    test_field_dofp_func();
    fn test_field_dofp_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probedesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofp_name) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probedesc),
                "::",
                stringify!(dofp_name)
            )
        );
    }
    test_field_dofp_name();
    fn test_field_dofp_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probedesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofp_id) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probedesc),
                "::",
                stringify!(dofp_id)
            )
        );
    }
    test_field_dofp_id();
}
pub type dof_probedesc_t = dof_probedesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dof_actdesc {
    pub dofa_difo: dof_secidx_t,
    pub dofa_strtab: dof_secidx_t,
    pub dofa_kind: u32,
    pub dofa_ntuple: u32,
    pub dofa_arg: u64,
    pub dofa_uarg: u64,
}
#[test]
fn bindgen_test_layout_dof_actdesc() {
    assert_eq!(
        ::std::mem::size_of::<dof_actdesc>(),
        32usize,
        concat!("Size of: ", stringify!(dof_actdesc))
    );
    assert_eq!(
        ::std::mem::align_of::<dof_actdesc>(),
        8usize,
        concat!("Alignment of ", stringify!(dof_actdesc))
    );
    fn test_field_dofa_difo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_actdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofa_difo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_actdesc),
                "::",
                stringify!(dofa_difo)
            )
        );
    }
    test_field_dofa_difo();
    fn test_field_dofa_strtab() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_actdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofa_strtab) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_actdesc),
                "::",
                stringify!(dofa_strtab)
            )
        );
    }
    test_field_dofa_strtab();
    fn test_field_dofa_kind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_actdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofa_kind) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_actdesc),
                "::",
                stringify!(dofa_kind)
            )
        );
    }
    test_field_dofa_kind();
    fn test_field_dofa_ntuple() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_actdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofa_ntuple) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_actdesc),
                "::",
                stringify!(dofa_ntuple)
            )
        );
    }
    test_field_dofa_ntuple();
    fn test_field_dofa_arg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_actdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofa_arg) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_actdesc),
                "::",
                stringify!(dofa_arg)
            )
        );
    }
    test_field_dofa_arg();
    fn test_field_dofa_uarg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_actdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofa_uarg) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_actdesc),
                "::",
                stringify!(dofa_uarg)
            )
        );
    }
    test_field_dofa_uarg();
}
pub type dof_actdesc_t = dof_actdesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dof_difohdr {
    pub dofd_rtype: dtrace_diftype_t,
    pub dofd_links: [dof_secidx_t; 1usize],
}
#[test]
fn bindgen_test_layout_dof_difohdr() {
    assert_eq!(
        ::std::mem::size_of::<dof_difohdr>(),
        12usize,
        concat!("Size of: ", stringify!(dof_difohdr))
    );
    assert_eq!(
        ::std::mem::align_of::<dof_difohdr>(),
        4usize,
        concat!("Alignment of ", stringify!(dof_difohdr))
    );
    fn test_field_dofd_rtype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_difohdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofd_rtype) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_difohdr),
                "::",
                stringify!(dofd_rtype)
            )
        );
    }
    test_field_dofd_rtype();
    fn test_field_dofd_links() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_difohdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofd_links) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_difohdr),
                "::",
                stringify!(dofd_links)
            )
        );
    }
    test_field_dofd_links();
}
pub type dof_difohdr_t = dof_difohdr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dof_relohdr {
    pub dofr_strtab: dof_secidx_t,
    pub dofr_relsec: dof_secidx_t,
    pub dofr_tgtsec: dof_secidx_t,
}
#[test]
fn bindgen_test_layout_dof_relohdr() {
    assert_eq!(
        ::std::mem::size_of::<dof_relohdr>(),
        12usize,
        concat!("Size of: ", stringify!(dof_relohdr))
    );
    assert_eq!(
        ::std::mem::align_of::<dof_relohdr>(),
        4usize,
        concat!("Alignment of ", stringify!(dof_relohdr))
    );
    fn test_field_dofr_strtab() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_relohdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofr_strtab) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_relohdr),
                "::",
                stringify!(dofr_strtab)
            )
        );
    }
    test_field_dofr_strtab();
    fn test_field_dofr_relsec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_relohdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofr_relsec) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_relohdr),
                "::",
                stringify!(dofr_relsec)
            )
        );
    }
    test_field_dofr_relsec();
    fn test_field_dofr_tgtsec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_relohdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofr_tgtsec) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_relohdr),
                "::",
                stringify!(dofr_tgtsec)
            )
        );
    }
    test_field_dofr_tgtsec();
}
pub type dof_relohdr_t = dof_relohdr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dof_relodesc {
    pub dofr_name: dof_stridx_t,
    pub dofr_type: u32,
    pub dofr_offset: u64,
    pub dofr_data: u64,
}
#[test]
fn bindgen_test_layout_dof_relodesc() {
    assert_eq!(
        ::std::mem::size_of::<dof_relodesc>(),
        24usize,
        concat!("Size of: ", stringify!(dof_relodesc))
    );
    assert_eq!(
        ::std::mem::align_of::<dof_relodesc>(),
        8usize,
        concat!("Alignment of ", stringify!(dof_relodesc))
    );
    fn test_field_dofr_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_relodesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofr_name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_relodesc),
                "::",
                stringify!(dofr_name)
            )
        );
    }
    test_field_dofr_name();
    fn test_field_dofr_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_relodesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofr_type) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_relodesc),
                "::",
                stringify!(dofr_type)
            )
        );
    }
    test_field_dofr_type();
    fn test_field_dofr_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_relodesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofr_offset) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_relodesc),
                "::",
                stringify!(dofr_offset)
            )
        );
    }
    test_field_dofr_offset();
    fn test_field_dofr_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_relodesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofr_data) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_relodesc),
                "::",
                stringify!(dofr_data)
            )
        );
    }
    test_field_dofr_data();
}
pub type dof_relodesc_t = dof_relodesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dof_optdesc {
    pub dofo_option: u32,
    pub dofo_strtab: dof_secidx_t,
    pub dofo_value: u64,
}
#[test]
fn bindgen_test_layout_dof_optdesc() {
    assert_eq!(
        ::std::mem::size_of::<dof_optdesc>(),
        16usize,
        concat!("Size of: ", stringify!(dof_optdesc))
    );
    assert_eq!(
        ::std::mem::align_of::<dof_optdesc>(),
        8usize,
        concat!("Alignment of ", stringify!(dof_optdesc))
    );
    fn test_field_dofo_option() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_optdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofo_option) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_optdesc),
                "::",
                stringify!(dofo_option)
            )
        );
    }
    test_field_dofo_option();
    fn test_field_dofo_strtab() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_optdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofo_strtab) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_optdesc),
                "::",
                stringify!(dofo_strtab)
            )
        );
    }
    test_field_dofo_strtab();
    fn test_field_dofo_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_optdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofo_value) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_optdesc),
                "::",
                stringify!(dofo_value)
            )
        );
    }
    test_field_dofo_value();
}
pub type dof_optdesc_t = dof_optdesc;
pub type dof_attr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dof_provider {
    pub dofpv_strtab: dof_secidx_t,
    pub dofpv_probes: dof_secidx_t,
    pub dofpv_prargs: dof_secidx_t,
    pub dofpv_proffs: dof_secidx_t,
    pub dofpv_name: dof_stridx_t,
    pub dofpv_provattr: dof_attr_t,
    pub dofpv_modattr: dof_attr_t,
    pub dofpv_funcattr: dof_attr_t,
    pub dofpv_nameattr: dof_attr_t,
    pub dofpv_argsattr: dof_attr_t,
    pub dofpv_prenoffs: dof_secidx_t,
}
#[test]
fn bindgen_test_layout_dof_provider() {
    assert_eq!(
        ::std::mem::size_of::<dof_provider>(),
        44usize,
        concat!("Size of: ", stringify!(dof_provider))
    );
    assert_eq!(
        ::std::mem::align_of::<dof_provider>(),
        4usize,
        concat!("Alignment of ", stringify!(dof_provider))
    );
    fn test_field_dofpv_strtab() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_provider>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpv_strtab) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_provider),
                "::",
                stringify!(dofpv_strtab)
            )
        );
    }
    test_field_dofpv_strtab();
    fn test_field_dofpv_probes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_provider>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpv_probes) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_provider),
                "::",
                stringify!(dofpv_probes)
            )
        );
    }
    test_field_dofpv_probes();
    fn test_field_dofpv_prargs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_provider>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpv_prargs) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_provider),
                "::",
                stringify!(dofpv_prargs)
            )
        );
    }
    test_field_dofpv_prargs();
    fn test_field_dofpv_proffs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_provider>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpv_proffs) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_provider),
                "::",
                stringify!(dofpv_proffs)
            )
        );
    }
    test_field_dofpv_proffs();
    fn test_field_dofpv_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_provider>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpv_name) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_provider),
                "::",
                stringify!(dofpv_name)
            )
        );
    }
    test_field_dofpv_name();
    fn test_field_dofpv_provattr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_provider>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpv_provattr) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_provider),
                "::",
                stringify!(dofpv_provattr)
            )
        );
    }
    test_field_dofpv_provattr();
    fn test_field_dofpv_modattr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_provider>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpv_modattr) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_provider),
                "::",
                stringify!(dofpv_modattr)
            )
        );
    }
    test_field_dofpv_modattr();
    fn test_field_dofpv_funcattr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_provider>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpv_funcattr) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_provider),
                "::",
                stringify!(dofpv_funcattr)
            )
        );
    }
    test_field_dofpv_funcattr();
    fn test_field_dofpv_nameattr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_provider>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpv_nameattr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_provider),
                "::",
                stringify!(dofpv_nameattr)
            )
        );
    }
    test_field_dofpv_nameattr();
    fn test_field_dofpv_argsattr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_provider>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpv_argsattr) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_provider),
                "::",
                stringify!(dofpv_argsattr)
            )
        );
    }
    test_field_dofpv_argsattr();
    fn test_field_dofpv_prenoffs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_provider>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpv_prenoffs) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_provider),
                "::",
                stringify!(dofpv_prenoffs)
            )
        );
    }
    test_field_dofpv_prenoffs();
}
pub type dof_provider_t = dof_provider;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dof_probe {
    pub dofpr_addr: u64,
    pub dofpr_func: dof_stridx_t,
    pub dofpr_name: dof_stridx_t,
    pub dofpr_nargv: dof_stridx_t,
    pub dofpr_xargv: dof_stridx_t,
    pub dofpr_argidx: u32,
    pub dofpr_offidx: u32,
    pub dofpr_nargc: u8,
    pub dofpr_xargc: u8,
    pub dofpr_noffs: u16,
    pub dofpr_enoffidx: u32,
    pub dofpr_nenoffs: u16,
    pub dofpr_pad1: u16,
    pub dofpr_pad2: u32,
}
#[test]
fn bindgen_test_layout_dof_probe() {
    assert_eq!(
        ::std::mem::size_of::<dof_probe>(),
        48usize,
        concat!("Size of: ", stringify!(dof_probe))
    );
    assert_eq!(
        ::std::mem::align_of::<dof_probe>(),
        8usize,
        concat!("Alignment of ", stringify!(dof_probe))
    );
    fn test_field_dofpr_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probe>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpr_addr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probe),
                "::",
                stringify!(dofpr_addr)
            )
        );
    }
    test_field_dofpr_addr();
    fn test_field_dofpr_func() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probe>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpr_func) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probe),
                "::",
                stringify!(dofpr_func)
            )
        );
    }
    test_field_dofpr_func();
    fn test_field_dofpr_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probe>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpr_name) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probe),
                "::",
                stringify!(dofpr_name)
            )
        );
    }
    test_field_dofpr_name();
    fn test_field_dofpr_nargv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probe>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpr_nargv) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probe),
                "::",
                stringify!(dofpr_nargv)
            )
        );
    }
    test_field_dofpr_nargv();
    fn test_field_dofpr_xargv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probe>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpr_xargv) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probe),
                "::",
                stringify!(dofpr_xargv)
            )
        );
    }
    test_field_dofpr_xargv();
    fn test_field_dofpr_argidx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probe>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpr_argidx) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probe),
                "::",
                stringify!(dofpr_argidx)
            )
        );
    }
    test_field_dofpr_argidx();
    fn test_field_dofpr_offidx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probe>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpr_offidx) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probe),
                "::",
                stringify!(dofpr_offidx)
            )
        );
    }
    test_field_dofpr_offidx();
    fn test_field_dofpr_nargc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probe>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpr_nargc) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probe),
                "::",
                stringify!(dofpr_nargc)
            )
        );
    }
    test_field_dofpr_nargc();
    fn test_field_dofpr_xargc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probe>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpr_xargc) as usize - ptr as usize
            },
            33usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probe),
                "::",
                stringify!(dofpr_xargc)
            )
        );
    }
    test_field_dofpr_xargc();
    fn test_field_dofpr_noffs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probe>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpr_noffs) as usize - ptr as usize
            },
            34usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probe),
                "::",
                stringify!(dofpr_noffs)
            )
        );
    }
    test_field_dofpr_noffs();
    fn test_field_dofpr_enoffidx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probe>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpr_enoffidx) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probe),
                "::",
                stringify!(dofpr_enoffidx)
            )
        );
    }
    test_field_dofpr_enoffidx();
    fn test_field_dofpr_nenoffs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probe>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpr_nenoffs) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probe),
                "::",
                stringify!(dofpr_nenoffs)
            )
        );
    }
    test_field_dofpr_nenoffs();
    fn test_field_dofpr_pad1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probe>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpr_pad1) as usize - ptr as usize
            },
            42usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probe),
                "::",
                stringify!(dofpr_pad1)
            )
        );
    }
    test_field_dofpr_pad1();
    fn test_field_dofpr_pad2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_probe>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofpr_pad2) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_probe),
                "::",
                stringify!(dofpr_pad2)
            )
        );
    }
    test_field_dofpr_pad2();
}
pub type dof_probe_t = dof_probe;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dof_xlator {
    pub dofxl_members: dof_secidx_t,
    pub dofxl_strtab: dof_secidx_t,
    pub dofxl_argv: dof_stridx_t,
    pub dofxl_argc: u32,
    pub dofxl_type: dof_stridx_t,
    pub dofxl_attr: dof_attr_t,
}
#[test]
fn bindgen_test_layout_dof_xlator() {
    assert_eq!(
        ::std::mem::size_of::<dof_xlator>(),
        24usize,
        concat!("Size of: ", stringify!(dof_xlator))
    );
    assert_eq!(
        ::std::mem::align_of::<dof_xlator>(),
        4usize,
        concat!("Alignment of ", stringify!(dof_xlator))
    );
    fn test_field_dofxl_members() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_xlator>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofxl_members) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_xlator),
                "::",
                stringify!(dofxl_members)
            )
        );
    }
    test_field_dofxl_members();
    fn test_field_dofxl_strtab() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_xlator>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofxl_strtab) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_xlator),
                "::",
                stringify!(dofxl_strtab)
            )
        );
    }
    test_field_dofxl_strtab();
    fn test_field_dofxl_argv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_xlator>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofxl_argv) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_xlator),
                "::",
                stringify!(dofxl_argv)
            )
        );
    }
    test_field_dofxl_argv();
    fn test_field_dofxl_argc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_xlator>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofxl_argc) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_xlator),
                "::",
                stringify!(dofxl_argc)
            )
        );
    }
    test_field_dofxl_argc();
    fn test_field_dofxl_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_xlator>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofxl_type) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_xlator),
                "::",
                stringify!(dofxl_type)
            )
        );
    }
    test_field_dofxl_type();
    fn test_field_dofxl_attr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_xlator>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofxl_attr) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_xlator),
                "::",
                stringify!(dofxl_attr)
            )
        );
    }
    test_field_dofxl_attr();
}
pub type dof_xlator_t = dof_xlator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dof_xlmember {
    pub dofxm_difo: dof_secidx_t,
    pub dofxm_name: dof_stridx_t,
    pub dofxm_type: dtrace_diftype_t,
}
#[test]
fn bindgen_test_layout_dof_xlmember() {
    assert_eq!(
        ::std::mem::size_of::<dof_xlmember>(),
        16usize,
        concat!("Size of: ", stringify!(dof_xlmember))
    );
    assert_eq!(
        ::std::mem::align_of::<dof_xlmember>(),
        4usize,
        concat!("Alignment of ", stringify!(dof_xlmember))
    );
    fn test_field_dofxm_difo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_xlmember>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofxm_difo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_xlmember),
                "::",
                stringify!(dofxm_difo)
            )
        );
    }
    test_field_dofxm_difo();
    fn test_field_dofxm_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_xlmember>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofxm_name) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_xlmember),
                "::",
                stringify!(dofxm_name)
            )
        );
    }
    test_field_dofxm_name();
    fn test_field_dofxm_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_xlmember>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofxm_type) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_xlmember),
                "::",
                stringify!(dofxm_type)
            )
        );
    }
    test_field_dofxm_type();
}
pub type dof_xlmember_t = dof_xlmember;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dof_xlref {
    pub dofxr_xlator: dof_secidx_t,
    pub dofxr_member: u32,
    pub dofxr_argn: u32,
}
#[test]
fn bindgen_test_layout_dof_xlref() {
    assert_eq!(
        ::std::mem::size_of::<dof_xlref>(),
        12usize,
        concat!("Size of: ", stringify!(dof_xlref))
    );
    assert_eq!(
        ::std::mem::align_of::<dof_xlref>(),
        4usize,
        concat!("Alignment of ", stringify!(dof_xlref))
    );
    fn test_field_dofxr_xlator() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_xlref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofxr_xlator) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_xlref),
                "::",
                stringify!(dofxr_xlator)
            )
        );
    }
    test_field_dofxr_xlator();
    fn test_field_dofxr_member() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_xlref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofxr_member) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_xlref),
                "::",
                stringify!(dofxr_member)
            )
        );
    }
    test_field_dofxr_member();
    fn test_field_dofxr_argn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_xlref>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofxr_argn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_xlref),
                "::",
                stringify!(dofxr_argn)
            )
        );
    }
    test_field_dofxr_argn();
}
pub type dof_xlref_t = dof_xlref;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_difo {
    pub dtdo_buf: *mut dif_instr_t,
    pub dtdo_inttab: *mut u64,
    pub dtdo_strtab: *mut ::std::os::raw::c_char,
    pub dtdo_vartab: *mut dtrace_difv_t,
    pub dtdo_len: uint_t,
    pub dtdo_intlen: uint_t,
    pub dtdo_strlen: uint_t,
    pub dtdo_varlen: uint_t,
    pub dtdo_rtype: dtrace_diftype_t,
    pub dtdo_refcnt: uint_t,
    pub dtdo_destructive: uint_t,
    pub dtdo_kreltab: *mut dof_relodesc_t,
    pub dtdo_ureltab: *mut dof_relodesc_t,
    pub dtdo_xlmtab: *mut *mut dt_node,
    pub dtdo_krelen: uint_t,
    pub dtdo_urelen: uint_t,
    pub dtdo_xlmlen: uint_t,
}
#[test]
fn bindgen_test_layout_dtrace_difo() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_difo>(),
        104usize,
        concat!("Size of: ", stringify!(dtrace_difo))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_difo>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_difo))
    );
    fn test_field_dtdo_buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdo_buf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difo),
                "::",
                stringify!(dtdo_buf)
            )
        );
    }
    test_field_dtdo_buf();
    fn test_field_dtdo_inttab() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdo_inttab) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difo),
                "::",
                stringify!(dtdo_inttab)
            )
        );
    }
    test_field_dtdo_inttab();
    fn test_field_dtdo_strtab() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdo_strtab) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difo),
                "::",
                stringify!(dtdo_strtab)
            )
        );
    }
    test_field_dtdo_strtab();
    fn test_field_dtdo_vartab() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdo_vartab) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difo),
                "::",
                stringify!(dtdo_vartab)
            )
        );
    }
    test_field_dtdo_vartab();
    fn test_field_dtdo_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdo_len) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difo),
                "::",
                stringify!(dtdo_len)
            )
        );
    }
    test_field_dtdo_len();
    fn test_field_dtdo_intlen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdo_intlen) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difo),
                "::",
                stringify!(dtdo_intlen)
            )
        );
    }
    test_field_dtdo_intlen();
    fn test_field_dtdo_strlen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdo_strlen) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difo),
                "::",
                stringify!(dtdo_strlen)
            )
        );
    }
    test_field_dtdo_strlen();
    fn test_field_dtdo_varlen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdo_varlen) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difo),
                "::",
                stringify!(dtdo_varlen)
            )
        );
    }
    test_field_dtdo_varlen();
    fn test_field_dtdo_rtype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdo_rtype) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difo),
                "::",
                stringify!(dtdo_rtype)
            )
        );
    }
    test_field_dtdo_rtype();
    fn test_field_dtdo_refcnt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdo_refcnt) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difo),
                "::",
                stringify!(dtdo_refcnt)
            )
        );
    }
    test_field_dtdo_refcnt();
    fn test_field_dtdo_destructive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdo_destructive) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difo),
                "::",
                stringify!(dtdo_destructive)
            )
        );
    }
    test_field_dtdo_destructive();
    fn test_field_dtdo_kreltab() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdo_kreltab) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difo),
                "::",
                stringify!(dtdo_kreltab)
            )
        );
    }
    test_field_dtdo_kreltab();
    fn test_field_dtdo_ureltab() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdo_ureltab) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difo),
                "::",
                stringify!(dtdo_ureltab)
            )
        );
    }
    test_field_dtdo_ureltab();
    fn test_field_dtdo_xlmtab() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdo_xlmtab) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difo),
                "::",
                stringify!(dtdo_xlmtab)
            )
        );
    }
    test_field_dtdo_xlmtab();
    fn test_field_dtdo_krelen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdo_krelen) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difo),
                "::",
                stringify!(dtdo_krelen)
            )
        );
    }
    test_field_dtdo_krelen();
    fn test_field_dtdo_urelen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdo_urelen) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difo),
                "::",
                stringify!(dtdo_urelen)
            )
        );
    }
    test_field_dtdo_urelen();
    fn test_field_dtdo_xlmlen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_difo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdo_xlmlen) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_difo),
                "::",
                stringify!(dtdo_xlmlen)
            )
        );
    }
    test_field_dtdo_xlmlen();
}
pub type dtrace_difo_t = dtrace_difo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_predicate {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_probedesc {
    pub dtpd_id: dtrace_id_t,
    pub dtpd_provider: [::std::os::raw::c_char; 64usize],
    pub dtpd_mod: [::std::os::raw::c_char; 64usize],
    pub dtpd_func: [::std::os::raw::c_char; 128usize],
    pub dtpd_name: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_dtrace_probedesc() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_probedesc>(),
        324usize,
        concat!("Size of: ", stringify!(dtrace_probedesc))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_probedesc>(),
        4usize,
        concat!("Alignment of ", stringify!(dtrace_probedesc))
    );
    fn test_field_dtpd_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_probedesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpd_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_probedesc),
                "::",
                stringify!(dtpd_id)
            )
        );
    }
    test_field_dtpd_id();
    fn test_field_dtpd_provider() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_probedesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpd_provider) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_probedesc),
                "::",
                stringify!(dtpd_provider)
            )
        );
    }
    test_field_dtpd_provider();
    fn test_field_dtpd_mod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_probedesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpd_mod) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_probedesc),
                "::",
                stringify!(dtpd_mod)
            )
        );
    }
    test_field_dtpd_mod();
    fn test_field_dtpd_func() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_probedesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpd_func) as usize - ptr as usize
            },
            132usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_probedesc),
                "::",
                stringify!(dtpd_func)
            )
        );
    }
    test_field_dtpd_func();
    fn test_field_dtpd_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_probedesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpd_name) as usize - ptr as usize
            },
            260usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_probedesc),
                "::",
                stringify!(dtpd_name)
            )
        );
    }
    test_field_dtpd_name();
}
pub type dtrace_probedesc_t = dtrace_probedesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_repldesc {
    pub dtrpd_match: dtrace_probedesc_t,
    pub dtrpd_create: dtrace_probedesc_t,
}
#[test]
fn bindgen_test_layout_dtrace_repldesc() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_repldesc>(),
        648usize,
        concat!("Size of: ", stringify!(dtrace_repldesc))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_repldesc>(),
        4usize,
        concat!("Alignment of ", stringify!(dtrace_repldesc))
    );
    fn test_field_dtrpd_match() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_repldesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtrpd_match) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_repldesc),
                "::",
                stringify!(dtrpd_match)
            )
        );
    }
    test_field_dtrpd_match();
    fn test_field_dtrpd_create() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_repldesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtrpd_create) as usize - ptr as usize
            },
            324usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_repldesc),
                "::",
                stringify!(dtrpd_create)
            )
        );
    }
    test_field_dtrpd_create();
}
pub type dtrace_repldesc_t = dtrace_repldesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_preddesc {
    pub dtpdd_difo: *mut dtrace_difo_t,
    pub dtpdd_predicate: *mut dtrace_predicate,
}
#[test]
fn bindgen_test_layout_dtrace_preddesc() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_preddesc>(),
        16usize,
        concat!("Size of: ", stringify!(dtrace_preddesc))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_preddesc>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_preddesc))
    );
    fn test_field_dtpdd_difo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_preddesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpdd_difo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_preddesc),
                "::",
                stringify!(dtpdd_difo)
            )
        );
    }
    test_field_dtpdd_difo();
    fn test_field_dtpdd_predicate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_preddesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpdd_predicate) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_preddesc),
                "::",
                stringify!(dtpdd_predicate)
            )
        );
    }
    test_field_dtpdd_predicate();
}
pub type dtrace_preddesc_t = dtrace_preddesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_actdesc {
    pub dtad_difo: *mut dtrace_difo_t,
    pub dtad_next: *mut dtrace_actdesc,
    pub dtad_kind: dtrace_actkind_t,
    pub dtad_ntuple: u32,
    pub dtad_arg: u64,
    pub dtad_uarg: u64,
    pub dtad_refcnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_dtrace_actdesc() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_actdesc>(),
        48usize,
        concat!("Size of: ", stringify!(dtrace_actdesc))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_actdesc>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_actdesc))
    );
    fn test_field_dtad_difo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_actdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtad_difo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_actdesc),
                "::",
                stringify!(dtad_difo)
            )
        );
    }
    test_field_dtad_difo();
    fn test_field_dtad_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_actdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtad_next) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_actdesc),
                "::",
                stringify!(dtad_next)
            )
        );
    }
    test_field_dtad_next();
    fn test_field_dtad_kind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_actdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtad_kind) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_actdesc),
                "::",
                stringify!(dtad_kind)
            )
        );
    }
    test_field_dtad_kind();
    fn test_field_dtad_ntuple() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_actdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtad_ntuple) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_actdesc),
                "::",
                stringify!(dtad_ntuple)
            )
        );
    }
    test_field_dtad_ntuple();
    fn test_field_dtad_arg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_actdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtad_arg) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_actdesc),
                "::",
                stringify!(dtad_arg)
            )
        );
    }
    test_field_dtad_arg();
    fn test_field_dtad_uarg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_actdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtad_uarg) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_actdesc),
                "::",
                stringify!(dtad_uarg)
            )
        );
    }
    test_field_dtad_uarg();
    fn test_field_dtad_refcnt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_actdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtad_refcnt) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_actdesc),
                "::",
                stringify!(dtad_refcnt)
            )
        );
    }
    test_field_dtad_refcnt();
}
pub type dtrace_actdesc_t = dtrace_actdesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_ecbdesc {
    pub dted_action: *mut dtrace_actdesc_t,
    pub dted_pred: dtrace_preddesc_t,
    pub dted_probe: dtrace_probedesc_t,
    pub dted_uarg: u64,
    pub dted_refcnt: ::std::os::raw::c_int,
    pub dted_probegen: u64,
}
#[test]
fn bindgen_test_layout_dtrace_ecbdesc() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_ecbdesc>(),
        376usize,
        concat!("Size of: ", stringify!(dtrace_ecbdesc))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_ecbdesc>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_ecbdesc))
    );
    fn test_field_dted_action() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_ecbdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dted_action) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_ecbdesc),
                "::",
                stringify!(dted_action)
            )
        );
    }
    test_field_dted_action();
    fn test_field_dted_pred() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_ecbdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dted_pred) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_ecbdesc),
                "::",
                stringify!(dted_pred)
            )
        );
    }
    test_field_dted_pred();
    fn test_field_dted_probe() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_ecbdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dted_probe) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_ecbdesc),
                "::",
                stringify!(dted_probe)
            )
        );
    }
    test_field_dted_probe();
    fn test_field_dted_uarg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_ecbdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dted_uarg) as usize - ptr as usize
            },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_ecbdesc),
                "::",
                stringify!(dted_uarg)
            )
        );
    }
    test_field_dted_uarg();
    fn test_field_dted_refcnt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_ecbdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dted_refcnt) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_ecbdesc),
                "::",
                stringify!(dted_refcnt)
            )
        );
    }
    test_field_dted_refcnt();
    fn test_field_dted_probegen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_ecbdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dted_probegen) as usize - ptr as usize
            },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_ecbdesc),
                "::",
                stringify!(dted_probegen)
            )
        );
    }
    test_field_dted_probegen();
}
pub type dtrace_ecbdesc_t = dtrace_ecbdesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_recdesc {
    pub dtrd_action: dtrace_actkind_t,
    pub dtrd_size: u32,
    pub dtrd_offset: u32,
    pub dtrd_alignment: u16,
    pub dtrd_format: u16,
    pub dtrd_arg: u64,
    pub dtrd_uarg: u64,
}
#[test]
fn bindgen_test_layout_dtrace_recdesc() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_recdesc>(),
        32usize,
        concat!("Size of: ", stringify!(dtrace_recdesc))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_recdesc>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_recdesc))
    );
    fn test_field_dtrd_action() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_recdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtrd_action) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_recdesc),
                "::",
                stringify!(dtrd_action)
            )
        );
    }
    test_field_dtrd_action();
    fn test_field_dtrd_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_recdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtrd_size) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_recdesc),
                "::",
                stringify!(dtrd_size)
            )
        );
    }
    test_field_dtrd_size();
    fn test_field_dtrd_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_recdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtrd_offset) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_recdesc),
                "::",
                stringify!(dtrd_offset)
            )
        );
    }
    test_field_dtrd_offset();
    fn test_field_dtrd_alignment() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_recdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtrd_alignment) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_recdesc),
                "::",
                stringify!(dtrd_alignment)
            )
        );
    }
    test_field_dtrd_alignment();
    fn test_field_dtrd_format() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_recdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtrd_format) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_recdesc),
                "::",
                stringify!(dtrd_format)
            )
        );
    }
    test_field_dtrd_format();
    fn test_field_dtrd_arg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_recdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtrd_arg) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_recdesc),
                "::",
                stringify!(dtrd_arg)
            )
        );
    }
    test_field_dtrd_arg();
    fn test_field_dtrd_uarg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_recdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtrd_uarg) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_recdesc),
                "::",
                stringify!(dtrd_uarg)
            )
        );
    }
    test_field_dtrd_uarg();
}
pub type dtrace_recdesc_t = dtrace_recdesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_eprobedesc {
    pub dtepd_epid: dtrace_epid_t,
    pub dtepd_probeid: dtrace_id_t,
    pub dtepd_uarg: u64,
    pub dtepd_size: u32,
    pub dtepd_nrecs: ::std::os::raw::c_int,
    pub dtepd_rec: [dtrace_recdesc_t; 1usize],
}
#[test]
fn bindgen_test_layout_dtrace_eprobedesc() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_eprobedesc>(),
        56usize,
        concat!("Size of: ", stringify!(dtrace_eprobedesc))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_eprobedesc>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_eprobedesc))
    );
    fn test_field_dtepd_epid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_eprobedesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtepd_epid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_eprobedesc),
                "::",
                stringify!(dtepd_epid)
            )
        );
    }
    test_field_dtepd_epid();
    fn test_field_dtepd_probeid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_eprobedesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtepd_probeid) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_eprobedesc),
                "::",
                stringify!(dtepd_probeid)
            )
        );
    }
    test_field_dtepd_probeid();
    fn test_field_dtepd_uarg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_eprobedesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtepd_uarg) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_eprobedesc),
                "::",
                stringify!(dtepd_uarg)
            )
        );
    }
    test_field_dtepd_uarg();
    fn test_field_dtepd_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_eprobedesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtepd_size) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_eprobedesc),
                "::",
                stringify!(dtepd_size)
            )
        );
    }
    test_field_dtepd_size();
    fn test_field_dtepd_nrecs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_eprobedesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtepd_nrecs) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_eprobedesc),
                "::",
                stringify!(dtepd_nrecs)
            )
        );
    }
    test_field_dtepd_nrecs();
    fn test_field_dtepd_rec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_eprobedesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtepd_rec) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_eprobedesc),
                "::",
                stringify!(dtepd_rec)
            )
        );
    }
    test_field_dtepd_rec();
}
pub type dtrace_eprobedesc_t = dtrace_eprobedesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_aggdesc {
    pub dtagd_name: *mut ::std::os::raw::c_char,
    pub dtagd_varid: dtrace_aggvarid_t,
    pub dtagd_flags: ::std::os::raw::c_int,
    pub dtagd_id: dtrace_aggid_t,
    pub dtagd_epid: dtrace_epid_t,
    pub dtagd_size: u32,
    pub dtagd_nrecs: ::std::os::raw::c_int,
    pub dtagd_pad: u32,
    pub dtagd_rec: [dtrace_recdesc_t; 1usize],
}
#[test]
fn bindgen_test_layout_dtrace_aggdesc() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_aggdesc>(),
        72usize,
        concat!("Size of: ", stringify!(dtrace_aggdesc))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_aggdesc>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_aggdesc))
    );
    fn test_field_dtagd_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_aggdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtagd_name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_aggdesc),
                "::",
                stringify!(dtagd_name)
            )
        );
    }
    test_field_dtagd_name();
    fn test_field_dtagd_varid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_aggdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtagd_varid) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_aggdesc),
                "::",
                stringify!(dtagd_varid)
            )
        );
    }
    test_field_dtagd_varid();
    fn test_field_dtagd_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_aggdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtagd_flags) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_aggdesc),
                "::",
                stringify!(dtagd_flags)
            )
        );
    }
    test_field_dtagd_flags();
    fn test_field_dtagd_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_aggdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtagd_id) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_aggdesc),
                "::",
                stringify!(dtagd_id)
            )
        );
    }
    test_field_dtagd_id();
    fn test_field_dtagd_epid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_aggdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtagd_epid) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_aggdesc),
                "::",
                stringify!(dtagd_epid)
            )
        );
    }
    test_field_dtagd_epid();
    fn test_field_dtagd_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_aggdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtagd_size) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_aggdesc),
                "::",
                stringify!(dtagd_size)
            )
        );
    }
    test_field_dtagd_size();
    fn test_field_dtagd_nrecs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_aggdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtagd_nrecs) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_aggdesc),
                "::",
                stringify!(dtagd_nrecs)
            )
        );
    }
    test_field_dtagd_nrecs();
    fn test_field_dtagd_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_aggdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtagd_pad) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_aggdesc),
                "::",
                stringify!(dtagd_pad)
            )
        );
    }
    test_field_dtagd_pad();
    fn test_field_dtagd_rec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_aggdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtagd_rec) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_aggdesc),
                "::",
                stringify!(dtagd_rec)
            )
        );
    }
    test_field_dtagd_rec();
}
pub type dtrace_aggdesc_t = dtrace_aggdesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_fmtdesc {
    pub dtfd_string: *mut ::std::os::raw::c_char,
    pub dtfd_length: ::std::os::raw::c_int,
    pub dtfd_format: u16,
}
#[test]
fn bindgen_test_layout_dtrace_fmtdesc() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_fmtdesc>(),
        16usize,
        concat!("Size of: ", stringify!(dtrace_fmtdesc))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_fmtdesc>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_fmtdesc))
    );
    fn test_field_dtfd_string() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_fmtdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtfd_string) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_fmtdesc),
                "::",
                stringify!(dtfd_string)
            )
        );
    }
    test_field_dtfd_string();
    fn test_field_dtfd_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_fmtdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtfd_length) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_fmtdesc),
                "::",
                stringify!(dtfd_length)
            )
        );
    }
    test_field_dtfd_length();
    fn test_field_dtfd_format() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_fmtdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtfd_format) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_fmtdesc),
                "::",
                stringify!(dtfd_format)
            )
        );
    }
    test_field_dtfd_format();
}
pub type dtrace_fmtdesc_t = dtrace_fmtdesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_bufdesc {
    pub dtbd_size: u64,
    pub dtbd_cpu: u32,
    pub dtbd_errors: u32,
    pub dtbd_drops: u64,
    pub dtbd_data: *mut ::std::os::raw::c_char,
    pub dtbd_oldest: u64,
    pub dtbd_timestamp: u64,
}
#[test]
fn bindgen_test_layout_dtrace_bufdesc() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_bufdesc>(),
        48usize,
        concat!("Size of: ", stringify!(dtrace_bufdesc))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_bufdesc>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_bufdesc))
    );
    fn test_field_dtbd_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_bufdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtbd_size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_bufdesc),
                "::",
                stringify!(dtbd_size)
            )
        );
    }
    test_field_dtbd_size();
    fn test_field_dtbd_cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_bufdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtbd_cpu) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_bufdesc),
                "::",
                stringify!(dtbd_cpu)
            )
        );
    }
    test_field_dtbd_cpu();
    fn test_field_dtbd_errors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_bufdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtbd_errors) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_bufdesc),
                "::",
                stringify!(dtbd_errors)
            )
        );
    }
    test_field_dtbd_errors();
    fn test_field_dtbd_drops() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_bufdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtbd_drops) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_bufdesc),
                "::",
                stringify!(dtbd_drops)
            )
        );
    }
    test_field_dtbd_drops();
    fn test_field_dtbd_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_bufdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtbd_data) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_bufdesc),
                "::",
                stringify!(dtbd_data)
            )
        );
    }
    test_field_dtbd_data();
    fn test_field_dtbd_oldest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_bufdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtbd_oldest) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_bufdesc),
                "::",
                stringify!(dtbd_oldest)
            )
        );
    }
    test_field_dtbd_oldest();
    fn test_field_dtbd_timestamp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_bufdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtbd_timestamp) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_bufdesc),
                "::",
                stringify!(dtbd_timestamp)
            )
        );
    }
    test_field_dtbd_timestamp();
}
pub type dtrace_bufdesc_t = dtrace_bufdesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_rechdr {
    pub dtrh_epid: dtrace_epid_t,
    pub dtrh_timestamp_hi: u32,
    pub dtrh_timestamp_lo: u32,
}
#[test]
fn bindgen_test_layout_dtrace_rechdr() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_rechdr>(),
        12usize,
        concat!("Size of: ", stringify!(dtrace_rechdr))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_rechdr>(),
        4usize,
        concat!("Alignment of ", stringify!(dtrace_rechdr))
    );
    fn test_field_dtrh_epid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_rechdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtrh_epid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_rechdr),
                "::",
                stringify!(dtrh_epid)
            )
        );
    }
    test_field_dtrh_epid();
    fn test_field_dtrh_timestamp_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_rechdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtrh_timestamp_hi) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_rechdr),
                "::",
                stringify!(dtrh_timestamp_hi)
            )
        );
    }
    test_field_dtrh_timestamp_hi();
    fn test_field_dtrh_timestamp_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_rechdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtrh_timestamp_lo) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_rechdr),
                "::",
                stringify!(dtrh_timestamp_lo)
            )
        );
    }
    test_field_dtrh_timestamp_lo();
}
pub type dtrace_rechdr_t = dtrace_rechdr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_status {
    pub dtst_dyndrops: u64,
    pub dtst_dyndrops_rinsing: u64,
    pub dtst_dyndrops_dirty: u64,
    pub dtst_specdrops: u64,
    pub dtst_specdrops_busy: u64,
    pub dtst_specdrops_unavail: u64,
    pub dtst_errors: u64,
    pub dtst_filled: u64,
    pub dtst_stkstroverflows: u64,
    pub dtst_dblerrors: u64,
    pub dtst_killed: ::std::os::raw::c_char,
    pub dtst_exiting: ::std::os::raw::c_char,
    pub dtst_pad: [::std::os::raw::c_char; 6usize],
}
#[test]
fn bindgen_test_layout_dtrace_status() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_status>(),
        88usize,
        concat!("Size of: ", stringify!(dtrace_status))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_status>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_status))
    );
    fn test_field_dtst_dyndrops() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtst_dyndrops) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_status),
                "::",
                stringify!(dtst_dyndrops)
            )
        );
    }
    test_field_dtst_dyndrops();
    fn test_field_dtst_dyndrops_rinsing() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtst_dyndrops_rinsing) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_status),
                "::",
                stringify!(dtst_dyndrops_rinsing)
            )
        );
    }
    test_field_dtst_dyndrops_rinsing();
    fn test_field_dtst_dyndrops_dirty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtst_dyndrops_dirty) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_status),
                "::",
                stringify!(dtst_dyndrops_dirty)
            )
        );
    }
    test_field_dtst_dyndrops_dirty();
    fn test_field_dtst_specdrops() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtst_specdrops) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_status),
                "::",
                stringify!(dtst_specdrops)
            )
        );
    }
    test_field_dtst_specdrops();
    fn test_field_dtst_specdrops_busy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtst_specdrops_busy) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_status),
                "::",
                stringify!(dtst_specdrops_busy)
            )
        );
    }
    test_field_dtst_specdrops_busy();
    fn test_field_dtst_specdrops_unavail() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtst_specdrops_unavail) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_status),
                "::",
                stringify!(dtst_specdrops_unavail)
            )
        );
    }
    test_field_dtst_specdrops_unavail();
    fn test_field_dtst_errors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtst_errors) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_status),
                "::",
                stringify!(dtst_errors)
            )
        );
    }
    test_field_dtst_errors();
    fn test_field_dtst_filled() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtst_filled) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_status),
                "::",
                stringify!(dtst_filled)
            )
        );
    }
    test_field_dtst_filled();
    fn test_field_dtst_stkstroverflows() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtst_stkstroverflows) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_status),
                "::",
                stringify!(dtst_stkstroverflows)
            )
        );
    }
    test_field_dtst_stkstroverflows();
    fn test_field_dtst_dblerrors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtst_dblerrors) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_status),
                "::",
                stringify!(dtst_dblerrors)
            )
        );
    }
    test_field_dtst_dblerrors();
    fn test_field_dtst_killed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtst_killed) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_status),
                "::",
                stringify!(dtst_killed)
            )
        );
    }
    test_field_dtst_killed();
    fn test_field_dtst_exiting() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtst_exiting) as usize - ptr as usize
            },
            81usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_status),
                "::",
                stringify!(dtst_exiting)
            )
        );
    }
    test_field_dtst_exiting();
    fn test_field_dtst_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtst_pad) as usize - ptr as usize
            },
            82usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_status),
                "::",
                stringify!(dtst_pad)
            )
        );
    }
    test_field_dtst_pad();
}
pub type dtrace_status_t = dtrace_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_conf {
    pub dtc_difversion: uint_t,
    pub dtc_difintregs: uint_t,
    pub dtc_diftupregs: uint_t,
    pub dtc_ctfmodel: uint_t,
    pub dtc_pad: [uint_t; 8usize],
}
#[test]
fn bindgen_test_layout_dtrace_conf() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_conf>(),
        48usize,
        concat!("Size of: ", stringify!(dtrace_conf))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_conf>(),
        4usize,
        concat!("Alignment of ", stringify!(dtrace_conf))
    );
    fn test_field_dtc_difversion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtc_difversion) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_conf),
                "::",
                stringify!(dtc_difversion)
            )
        );
    }
    test_field_dtc_difversion();
    fn test_field_dtc_difintregs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtc_difintregs) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_conf),
                "::",
                stringify!(dtc_difintregs)
            )
        );
    }
    test_field_dtc_difintregs();
    fn test_field_dtc_diftupregs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtc_diftupregs) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_conf),
                "::",
                stringify!(dtc_diftupregs)
            )
        );
    }
    test_field_dtc_diftupregs();
    fn test_field_dtc_ctfmodel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtc_ctfmodel) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_conf),
                "::",
                stringify!(dtc_ctfmodel)
            )
        );
    }
    test_field_dtc_ctfmodel();
    fn test_field_dtc_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtc_pad) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_conf),
                "::",
                stringify!(dtc_pad)
            )
        );
    }
    test_field_dtc_pad();
}
pub type dtrace_conf_t = dtrace_conf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_argdesc {
    pub dtargd_id: dtrace_id_t,
    pub dtargd_ndx: ::std::os::raw::c_int,
    pub dtargd_mapping: ::std::os::raw::c_int,
    pub dtargd_native: [::std::os::raw::c_char; 128usize],
    pub dtargd_xlate: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_dtrace_argdesc() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_argdesc>(),
        268usize,
        concat!("Size of: ", stringify!(dtrace_argdesc))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_argdesc>(),
        4usize,
        concat!("Alignment of ", stringify!(dtrace_argdesc))
    );
    fn test_field_dtargd_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_argdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtargd_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_argdesc),
                "::",
                stringify!(dtargd_id)
            )
        );
    }
    test_field_dtargd_id();
    fn test_field_dtargd_ndx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_argdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtargd_ndx) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_argdesc),
                "::",
                stringify!(dtargd_ndx)
            )
        );
    }
    test_field_dtargd_ndx();
    fn test_field_dtargd_mapping() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_argdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtargd_mapping) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_argdesc),
                "::",
                stringify!(dtargd_mapping)
            )
        );
    }
    test_field_dtargd_mapping();
    fn test_field_dtargd_native() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_argdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtargd_native) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_argdesc),
                "::",
                stringify!(dtargd_native)
            )
        );
    }
    test_field_dtargd_native();
    fn test_field_dtargd_xlate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_argdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtargd_xlate) as usize - ptr as usize
            },
            140usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_argdesc),
                "::",
                stringify!(dtargd_xlate)
            )
        );
    }
    test_field_dtargd_xlate();
}
pub type dtrace_argdesc_t = dtrace_argdesc;
pub type dtrace_stability_t = u8;
pub type dtrace_class_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_ppriv {
    pub dtpp_flags: u32,
    pub dtpp_uid: uid_t,
    pub dtpp_zoneid: zoneid_t,
}
#[test]
fn bindgen_test_layout_dtrace_ppriv() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_ppriv>(),
        12usize,
        concat!("Size of: ", stringify!(dtrace_ppriv))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_ppriv>(),
        4usize,
        concat!("Alignment of ", stringify!(dtrace_ppriv))
    );
    fn test_field_dtpp_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_ppriv>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpp_flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_ppriv),
                "::",
                stringify!(dtpp_flags)
            )
        );
    }
    test_field_dtpp_flags();
    fn test_field_dtpp_uid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_ppriv>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpp_uid) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_ppriv),
                "::",
                stringify!(dtpp_uid)
            )
        );
    }
    test_field_dtpp_uid();
    fn test_field_dtpp_zoneid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_ppriv>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpp_zoneid) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_ppriv),
                "::",
                stringify!(dtpp_zoneid)
            )
        );
    }
    test_field_dtpp_zoneid();
}
pub type dtrace_ppriv_t = dtrace_ppriv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_attribute {
    pub dtat_name: dtrace_stability_t,
    pub dtat_data: dtrace_stability_t,
    pub dtat_class: dtrace_class_t,
}
#[test]
fn bindgen_test_layout_dtrace_attribute() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_attribute>(),
        3usize,
        concat!("Size of: ", stringify!(dtrace_attribute))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_attribute>(),
        1usize,
        concat!("Alignment of ", stringify!(dtrace_attribute))
    );
    fn test_field_dtat_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_attribute>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtat_name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_attribute),
                "::",
                stringify!(dtat_name)
            )
        );
    }
    test_field_dtat_name();
    fn test_field_dtat_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_attribute>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtat_data) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_attribute),
                "::",
                stringify!(dtat_data)
            )
        );
    }
    test_field_dtat_data();
    fn test_field_dtat_class() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_attribute>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtat_class) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_attribute),
                "::",
                stringify!(dtat_class)
            )
        );
    }
    test_field_dtat_class();
}
pub type dtrace_attribute_t = dtrace_attribute;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_pattr {
    pub dtpa_provider: dtrace_attribute_t,
    pub dtpa_mod: dtrace_attribute_t,
    pub dtpa_func: dtrace_attribute_t,
    pub dtpa_name: dtrace_attribute_t,
    pub dtpa_args: dtrace_attribute_t,
}
#[test]
fn bindgen_test_layout_dtrace_pattr() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_pattr>(),
        15usize,
        concat!("Size of: ", stringify!(dtrace_pattr))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_pattr>(),
        1usize,
        concat!("Alignment of ", stringify!(dtrace_pattr))
    );
    fn test_field_dtpa_provider() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_pattr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpa_provider) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_pattr),
                "::",
                stringify!(dtpa_provider)
            )
        );
    }
    test_field_dtpa_provider();
    fn test_field_dtpa_mod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_pattr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpa_mod) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_pattr),
                "::",
                stringify!(dtpa_mod)
            )
        );
    }
    test_field_dtpa_mod();
    fn test_field_dtpa_func() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_pattr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpa_func) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_pattr),
                "::",
                stringify!(dtpa_func)
            )
        );
    }
    test_field_dtpa_func();
    fn test_field_dtpa_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_pattr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpa_name) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_pattr),
                "::",
                stringify!(dtpa_name)
            )
        );
    }
    test_field_dtpa_name();
    fn test_field_dtpa_args() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_pattr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpa_args) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_pattr),
                "::",
                stringify!(dtpa_args)
            )
        );
    }
    test_field_dtpa_args();
}
pub type dtrace_pattr_t = dtrace_pattr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_providerdesc {
    pub dtvd_name: [::std::os::raw::c_char; 64usize],
    pub dtvd_attr: dtrace_pattr_t,
    pub dtvd_priv: dtrace_ppriv_t,
}
#[test]
fn bindgen_test_layout_dtrace_providerdesc() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_providerdesc>(),
        92usize,
        concat!("Size of: ", stringify!(dtrace_providerdesc))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_providerdesc>(),
        4usize,
        concat!("Alignment of ", stringify!(dtrace_providerdesc))
    );
    fn test_field_dtvd_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_providerdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtvd_name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_providerdesc),
                "::",
                stringify!(dtvd_name)
            )
        );
    }
    test_field_dtvd_name();
    fn test_field_dtvd_attr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_providerdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtvd_attr) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_providerdesc),
                "::",
                stringify!(dtvd_attr)
            )
        );
    }
    test_field_dtvd_attr();
    fn test_field_dtvd_priv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_providerdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtvd_priv) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_providerdesc),
                "::",
                stringify!(dtvd_priv)
            )
        );
    }
    test_field_dtvd_priv();
}
pub type dtrace_providerdesc_t = dtrace_providerdesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_symbol {
    pub dtsym_addr: u64,
    pub dtsym_size: u64,
    pub dtsym_name: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_dtrace_symbol() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_symbol>(),
        144usize,
        concat!("Size of: ", stringify!(dtrace_symbol))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_symbol>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_symbol))
    );
    fn test_field_dtsym_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_symbol>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtsym_addr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_symbol),
                "::",
                stringify!(dtsym_addr)
            )
        );
    }
    test_field_dtsym_addr();
    fn test_field_dtsym_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_symbol>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtsym_size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_symbol),
                "::",
                stringify!(dtsym_size)
            )
        );
    }
    test_field_dtsym_size();
    fn test_field_dtsym_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_symbol>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtsym_name) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_symbol),
                "::",
                stringify!(dtsym_name)
            )
        );
    }
    test_field_dtsym_name();
}
pub type dtrace_symbol_t = dtrace_symbol;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_module_symbols {
    pub dtmodsyms_uuid: UUID,
    pub dtmodsyms_count: u64,
    pub dtmodsyms_symbols: [dtrace_symbol_t; 1usize],
}
#[test]
fn bindgen_test_layout_dtrace_module_symbols() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_module_symbols>(),
        168usize,
        concat!("Size of: ", stringify!(dtrace_module_symbols))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_module_symbols>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_module_symbols))
    );
    fn test_field_dtmodsyms_uuid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_module_symbols>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtmodsyms_uuid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_module_symbols),
                "::",
                stringify!(dtmodsyms_uuid)
            )
        );
    }
    test_field_dtmodsyms_uuid();
    fn test_field_dtmodsyms_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_module_symbols>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtmodsyms_count) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_module_symbols),
                "::",
                stringify!(dtmodsyms_count)
            )
        );
    }
    test_field_dtmodsyms_count();
    fn test_field_dtmodsyms_symbols() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_module_symbols>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtmodsyms_symbols) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_module_symbols),
                "::",
                stringify!(dtmodsyms_symbols)
            )
        );
    }
    test_field_dtmodsyms_symbols();
}
pub type dtrace_module_symbols_t = dtrace_module_symbols;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_module_uuids_list {
    pub dtmul_count: u64,
    pub dtmul_uuid: [UUID; 1usize],
}
#[test]
fn bindgen_test_layout_dtrace_module_uuids_list() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_module_uuids_list>(),
        24usize,
        concat!("Size of: ", stringify!(dtrace_module_uuids_list))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_module_uuids_list>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_module_uuids_list))
    );
    fn test_field_dtmul_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_module_uuids_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtmul_count) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_module_uuids_list),
                "::",
                stringify!(dtmul_count)
            )
        );
    }
    test_field_dtmul_count();
    fn test_field_dtmul_uuid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_module_uuids_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtmul_uuid) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_module_uuids_list),
                "::",
                stringify!(dtmul_uuid)
            )
        );
    }
    test_field_dtmul_uuid();
}
pub type dtrace_module_uuids_list_t = dtrace_module_uuids_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_procdesc {
    pub p_name: [::std::os::raw::c_char; 128usize],
    pub p_name_length: ::std::os::raw::c_int,
    pub p_pid: pid_t,
}
#[test]
fn bindgen_test_layout_dtrace_procdesc() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_procdesc>(),
        136usize,
        concat!("Size of: ", stringify!(dtrace_procdesc))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_procdesc>(),
        4usize,
        concat!("Alignment of ", stringify!(dtrace_procdesc))
    );
    fn test_field_p_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_procdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_procdesc),
                "::",
                stringify!(p_name)
            )
        );
    }
    test_field_p_name();
    fn test_field_p_name_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_procdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_name_length) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_procdesc),
                "::",
                stringify!(p_name_length)
            )
        );
    }
    test_field_p_name_length();
    fn test_field_p_pid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_procdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_pid) as usize - ptr as usize
            },
            132usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_procdesc),
                "::",
                stringify!(p_pid)
            )
        );
    }
    test_field_p_pid();
}
pub type dtrace_procdesc_t = dtrace_procdesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dof_helper {
    pub dofhp_mod: [::std::os::raw::c_char; 64usize],
    pub dofhp_addr: u64,
    pub dofhp_dof: u64,
}
#[test]
fn bindgen_test_layout_dof_helper() {
    assert_eq!(
        ::std::mem::size_of::<dof_helper>(),
        80usize,
        concat!("Size of: ", stringify!(dof_helper))
    );
    assert_eq!(
        ::std::mem::align_of::<dof_helper>(),
        8usize,
        concat!("Alignment of ", stringify!(dof_helper))
    );
    fn test_field_dofhp_mod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_helper>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofhp_mod) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_helper),
                "::",
                stringify!(dofhp_mod)
            )
        );
    }
    test_field_dofhp_mod();
    fn test_field_dofhp_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_helper>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofhp_addr) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_helper),
                "::",
                stringify!(dofhp_addr)
            )
        );
    }
    test_field_dofhp_addr();
    fn test_field_dofhp_dof() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_helper>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofhp_dof) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_helper),
                "::",
                stringify!(dofhp_dof)
            )
        );
    }
    test_field_dofhp_dof();
}
pub type dof_helper_t = dof_helper;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dof_ioctl_data {
    pub dofiod_count: u64,
    pub dofiod_helpers: [dof_helper_t; 1usize],
}
#[test]
fn bindgen_test_layout_dof_ioctl_data() {
    assert_eq!(
        ::std::mem::size_of::<dof_ioctl_data>(),
        88usize,
        concat!("Size of: ", stringify!(dof_ioctl_data))
    );
    assert_eq!(
        ::std::mem::align_of::<dof_ioctl_data>(),
        8usize,
        concat!("Alignment of ", stringify!(dof_ioctl_data))
    );
    fn test_field_dofiod_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_ioctl_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofiod_count) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_ioctl_data),
                "::",
                stringify!(dofiod_count)
            )
        );
    }
    test_field_dofiod_count();
    fn test_field_dofiod_helpers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dof_ioctl_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dofiod_helpers) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dof_ioctl_data),
                "::",
                stringify!(dofiod_helpers)
            )
        );
    }
    test_field_dofiod_helpers();
}
pub type dof_ioctl_data_t = dof_ioctl_data;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    fn test_field__base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._base) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sbuf),
                "::",
                stringify!(_base)
            )
        );
    }
    test_field__base();
    fn test_field__size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__sbuf),
                "::",
                stringify!(_size)
            )
        );
    }
    test_field__size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    fn test_field__p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_p)
            )
        );
    }
    test_field__p();
    fn test_field__r() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._r) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_r)
            )
        );
    }
    test_field__r();
    fn test_field__w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._w) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_w)
            )
        );
    }
    test_field__w();
    fn test_field__flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_flags)
            )
        );
    }
    test_field__flags();
    fn test_field__file() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._file) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_file)
            )
        );
    }
    test_field__file();
    fn test_field__bf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._bf) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_bf)
            )
        );
    }
    test_field__bf();
    fn test_field__lbfsize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._lbfsize) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_lbfsize)
            )
        );
    }
    test_field__lbfsize();
    fn test_field__cookie() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._cookie) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_cookie)
            )
        );
    }
    test_field__cookie();
    fn test_field__close() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._close) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_close)
            )
        );
    }
    test_field__close();
    fn test_field__read() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._read) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_read)
            )
        );
    }
    test_field__read();
    fn test_field__seek() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._seek) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_seek)
            )
        );
    }
    test_field__seek();
    fn test_field__write() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._write) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_write)
            )
        );
    }
    test_field__write();
    fn test_field__ub() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._ub) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_ub)
            )
        );
    }
    test_field__ub();
    fn test_field__extra() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._extra) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_extra)
            )
        );
    }
    test_field__extra();
    fn test_field__ur() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._ur) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_ur)
            )
        );
    }
    test_field__ur();
    fn test_field__ubuf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._ubuf) as usize - ptr as usize
            },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_ubuf)
            )
        );
    }
    test_field__ubuf();
    fn test_field__nbuf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._nbuf) as usize - ptr as usize
            },
            119usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_nbuf)
            )
        );
    }
    test_field__nbuf();
    fn test_field__lb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._lb) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_lb)
            )
        );
    }
    test_field__lb();
    fn test_field__blksize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._blksize) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_blksize)
            )
        );
    }
    test_field__blksize();
    fn test_field__offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sFILE>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(__sFILE),
                "::",
                stringify!(_offset)
            )
        );
    }
    test_field__offset();
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ssize_t;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut size_t,
        __stream: *mut FILE,
    ) -> ssize_t;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: size_t,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: size_t,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: size_t,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
pub type __GElf_Addr = ::std::os::raw::c_ulong;
pub type __GElf_Xword = ::std::os::raw::c_ulong;
pub type __GElf_Half = ::std::os::raw::c_ushort;
pub type __GElf_Word = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GElf_Sym {
    pub st_name: __GElf_Word,
    pub st_info: ::std::os::raw::c_uchar,
    pub st_other: ::std::os::raw::c_uchar,
    pub st_shndx: __GElf_Half,
    pub st_value: __GElf_Addr,
    pub st_size: __GElf_Xword,
}
#[test]
fn bindgen_test_layout___GElf_Sym() {
    assert_eq!(
        ::std::mem::size_of::<__GElf_Sym>(),
        24usize,
        concat!("Size of: ", stringify!(__GElf_Sym))
    );
    assert_eq!(
        ::std::mem::align_of::<__GElf_Sym>(),
        8usize,
        concat!("Alignment of ", stringify!(__GElf_Sym))
    );
    fn test_field_st_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__GElf_Sym>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).st_name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__GElf_Sym),
                "::",
                stringify!(st_name)
            )
        );
    }
    test_field_st_name();
    fn test_field_st_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__GElf_Sym>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).st_info) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__GElf_Sym),
                "::",
                stringify!(st_info)
            )
        );
    }
    test_field_st_info();
    fn test_field_st_other() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__GElf_Sym>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).st_other) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(__GElf_Sym),
                "::",
                stringify!(st_other)
            )
        );
    }
    test_field_st_other();
    fn test_field_st_shndx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__GElf_Sym>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).st_shndx) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(__GElf_Sym),
                "::",
                stringify!(st_shndx)
            )
        );
    }
    test_field_st_shndx();
    fn test_field_st_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__GElf_Sym>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).st_value) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__GElf_Sym),
                "::",
                stringify!(st_value)
            )
        );
    }
    test_field_st_value();
    fn test_field_st_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__GElf_Sym>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__GElf_Sym),
                "::",
                stringify!(st_size)
            )
        );
    }
    test_field_st_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ps_prochandle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_hdl {
    _unused: [u8; 0],
}
pub type dtrace_hdl_t = dtrace_hdl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_prog {
    _unused: [u8; 0],
}
pub type dtrace_prog_t = dtrace_prog;
pub type dtrace_vector_t = dtrace_vector;
pub type dtrace_aggdata_t = dtrace_aggdata;
extern "C" {
    pub fn dtrace_open(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut dtrace_hdl_t;
}
extern "C" {
    pub fn dtrace_vopen(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *const dtrace_vector_t,
        arg5: *mut ::std::os::raw::c_void,
    ) -> *mut dtrace_hdl_t;
}
extern "C" {
    pub fn dtrace_go(arg1: *mut dtrace_hdl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_stop(arg1: *mut dtrace_hdl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_sleep(arg1: *mut dtrace_hdl_t);
}
extern "C" {
    pub fn dtrace_close(arg1: *mut dtrace_hdl_t);
}
extern "C" {
    pub fn dtrace_errno(arg1: *mut dtrace_hdl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_errmsg(
        arg1: *mut dtrace_hdl_t,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dtrace_faultstr(
        arg1: *mut dtrace_hdl_t,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dtrace_subrstr(
        arg1: *mut dtrace_hdl_t,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dtrace_setopt(
        arg1: *mut dtrace_hdl_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_getopt(
        arg1: *mut dtrace_hdl_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut dtrace_optval_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_update(arg1: *mut dtrace_hdl_t);
}
extern "C" {
    pub fn dtrace_ctlfd(arg1: *mut dtrace_hdl_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_proginfo {
    pub dpi_descattr: dtrace_attribute_t,
    pub dpi_stmtattr: dtrace_attribute_t,
    pub dpi_aggregates: uint_t,
    pub dpi_recgens: uint_t,
    pub dpi_matches: uint_t,
    pub dpi_speculations: uint_t,
}
#[test]
fn bindgen_test_layout_dtrace_proginfo() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_proginfo>(),
        24usize,
        concat!("Size of: ", stringify!(dtrace_proginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_proginfo>(),
        4usize,
        concat!("Alignment of ", stringify!(dtrace_proginfo))
    );
    fn test_field_dpi_descattr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_proginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dpi_descattr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_proginfo),
                "::",
                stringify!(dpi_descattr)
            )
        );
    }
    test_field_dpi_descattr();
    fn test_field_dpi_stmtattr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_proginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dpi_stmtattr) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_proginfo),
                "::",
                stringify!(dpi_stmtattr)
            )
        );
    }
    test_field_dpi_stmtattr();
    fn test_field_dpi_aggregates() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_proginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dpi_aggregates) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_proginfo),
                "::",
                stringify!(dpi_aggregates)
            )
        );
    }
    test_field_dpi_aggregates();
    fn test_field_dpi_recgens() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_proginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dpi_recgens) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_proginfo),
                "::",
                stringify!(dpi_recgens)
            )
        );
    }
    test_field_dpi_recgens();
    fn test_field_dpi_matches() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_proginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dpi_matches) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_proginfo),
                "::",
                stringify!(dpi_matches)
            )
        );
    }
    test_field_dpi_matches();
    fn test_field_dpi_speculations() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_proginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dpi_speculations) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_proginfo),
                "::",
                stringify!(dpi_speculations)
            )
        );
    }
    test_field_dpi_speculations();
}
pub type dtrace_proginfo_t = dtrace_proginfo;
extern "C" {
    pub fn dtrace_program_strcompile(
        arg1: *mut dtrace_hdl_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: dtrace_probespec_t,
        arg4: uint_t,
        arg5: ::std::os::raw::c_int,
        arg6: *const *mut ::std::os::raw::c_char,
    ) -> *mut dtrace_prog_t;
}
extern "C" {
    pub fn dtrace_program_fcompile(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut FILE,
        arg3: uint_t,
        arg4: ::std::os::raw::c_int,
        arg5: *const *mut ::std::os::raw::c_char,
    ) -> *mut dtrace_prog_t;
}
extern "C" {
    pub fn dtrace_program_exec(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut dtrace_prog_t,
        arg3: *mut dtrace_proginfo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_program_info(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut dtrace_prog_t,
        arg3: *mut dtrace_proginfo_t,
    );
}
extern "C" {
    pub fn dtrace_program_link(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut dtrace_prog_t,
        arg3: uint_t,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
        arg6: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_program_header(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut FILE,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_dof_create(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut dtrace_prog_t,
        arg3: uint_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dtrace_dof_destroy(arg1: *mut dtrace_hdl_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dtrace_getopt_dof(arg1: *mut dtrace_hdl_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dtrace_geterr_dof(arg1: *mut dtrace_hdl_t) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_stmtdesc {
    pub dtsd_ecbdesc: *mut dtrace_ecbdesc_t,
    pub dtsd_action: *mut dtrace_actdesc_t,
    pub dtsd_action_last: *mut dtrace_actdesc_t,
    pub dtsd_aggdata: *mut ::std::os::raw::c_void,
    pub dtsd_fmtdata: *mut ::std::os::raw::c_void,
    pub dtsd_callback: ::std::option::Option<unsafe extern "C" fn()>,
    pub dtsd_data: *mut ::std::os::raw::c_void,
    pub dtsd_descattr: dtrace_attribute_t,
    pub dtsd_stmtattr: dtrace_attribute_t,
}
#[test]
fn bindgen_test_layout_dtrace_stmtdesc() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_stmtdesc>(),
        64usize,
        concat!("Size of: ", stringify!(dtrace_stmtdesc))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_stmtdesc>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_stmtdesc))
    );
    fn test_field_dtsd_ecbdesc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_stmtdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtsd_ecbdesc) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_stmtdesc),
                "::",
                stringify!(dtsd_ecbdesc)
            )
        );
    }
    test_field_dtsd_ecbdesc();
    fn test_field_dtsd_action() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_stmtdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtsd_action) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_stmtdesc),
                "::",
                stringify!(dtsd_action)
            )
        );
    }
    test_field_dtsd_action();
    fn test_field_dtsd_action_last() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_stmtdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtsd_action_last) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_stmtdesc),
                "::",
                stringify!(dtsd_action_last)
            )
        );
    }
    test_field_dtsd_action_last();
    fn test_field_dtsd_aggdata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_stmtdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtsd_aggdata) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_stmtdesc),
                "::",
                stringify!(dtsd_aggdata)
            )
        );
    }
    test_field_dtsd_aggdata();
    fn test_field_dtsd_fmtdata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_stmtdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtsd_fmtdata) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_stmtdesc),
                "::",
                stringify!(dtsd_fmtdata)
            )
        );
    }
    test_field_dtsd_fmtdata();
    fn test_field_dtsd_callback() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_stmtdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtsd_callback) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_stmtdesc),
                "::",
                stringify!(dtsd_callback)
            )
        );
    }
    test_field_dtsd_callback();
    fn test_field_dtsd_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_stmtdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtsd_data) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_stmtdesc),
                "::",
                stringify!(dtsd_data)
            )
        );
    }
    test_field_dtsd_data();
    fn test_field_dtsd_descattr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_stmtdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtsd_descattr) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_stmtdesc),
                "::",
                stringify!(dtsd_descattr)
            )
        );
    }
    test_field_dtsd_descattr();
    fn test_field_dtsd_stmtattr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_stmtdesc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtsd_stmtattr) as usize - ptr as usize
            },
            59usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_stmtdesc),
                "::",
                stringify!(dtsd_stmtattr)
            )
        );
    }
    test_field_dtsd_stmtattr();
}
pub type dtrace_stmtdesc_t = dtrace_stmtdesc;
pub type dtrace_stmt_f = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut dtrace_prog_t,
        arg3: *mut dtrace_stmtdesc_t,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn dtrace_stmt_create(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut dtrace_ecbdesc_t,
    ) -> *mut dtrace_stmtdesc_t;
}
extern "C" {
    pub fn dtrace_stmt_action(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut dtrace_stmtdesc_t,
    ) -> *mut dtrace_actdesc_t;
}
extern "C" {
    pub fn dtrace_stmt_add(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut dtrace_prog_t,
        arg3: *mut dtrace_stmtdesc_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_stmt_iter(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut dtrace_prog_t,
        arg3: dtrace_stmt_f,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_stmt_destroy(arg1: *mut dtrace_hdl_t, arg2: *mut dtrace_stmtdesc_t);
}
pub const dtrace_flowkind_t_DTRACEFLOW_ENTRY: dtrace_flowkind_t = 0;
pub const dtrace_flowkind_t_DTRACEFLOW_RETURN: dtrace_flowkind_t = 1;
pub const dtrace_flowkind_t_DTRACEFLOW_NONE: dtrace_flowkind_t = 2;
pub type dtrace_flowkind_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_probedata {
    pub dtpda_handle: *mut dtrace_hdl_t,
    pub dtpda_edesc: *mut dtrace_eprobedesc_t,
    pub dtpda_pdesc: *mut dtrace_probedesc_t,
    pub dtpda_cpu: processorid_t,
    pub dtpda_data: caddr_t,
    pub dtpda_flow: dtrace_flowkind_t,
    pub dtpda_prefix: *const ::std::os::raw::c_char,
    pub dtpda_indent: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_dtrace_probedata() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_probedata>(),
        64usize,
        concat!("Size of: ", stringify!(dtrace_probedata))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_probedata>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_probedata))
    );
    fn test_field_dtpda_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_probedata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpda_handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_probedata),
                "::",
                stringify!(dtpda_handle)
            )
        );
    }
    test_field_dtpda_handle();
    fn test_field_dtpda_edesc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_probedata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpda_edesc) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_probedata),
                "::",
                stringify!(dtpda_edesc)
            )
        );
    }
    test_field_dtpda_edesc();
    fn test_field_dtpda_pdesc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_probedata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpda_pdesc) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_probedata),
                "::",
                stringify!(dtpda_pdesc)
            )
        );
    }
    test_field_dtpda_pdesc();
    fn test_field_dtpda_cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_probedata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpda_cpu) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_probedata),
                "::",
                stringify!(dtpda_cpu)
            )
        );
    }
    test_field_dtpda_cpu();
    fn test_field_dtpda_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_probedata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpda_data) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_probedata),
                "::",
                stringify!(dtpda_data)
            )
        );
    }
    test_field_dtpda_data();
    fn test_field_dtpda_flow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_probedata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpda_flow) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_probedata),
                "::",
                stringify!(dtpda_flow)
            )
        );
    }
    test_field_dtpda_flow();
    fn test_field_dtpda_prefix() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_probedata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpda_prefix) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_probedata),
                "::",
                stringify!(dtpda_prefix)
            )
        );
    }
    test_field_dtpda_prefix();
    fn test_field_dtpda_indent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_probedata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtpda_indent) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_probedata),
                "::",
                stringify!(dtpda_indent)
            )
        );
    }
    test_field_dtpda_indent();
}
pub type dtrace_probedata_t = dtrace_probedata;
pub type dtrace_consume_probe_f = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const dtrace_probedata_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type dtrace_consume_rec_f = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const dtrace_probedata_t,
        arg2: *const dtrace_recdesc_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn dtrace_consume(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut FILE,
        arg3: dtrace_consume_probe_f,
        arg4: dtrace_consume_rec_f,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_status(arg1: *mut dtrace_hdl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_printf_create(
        arg1: *mut dtrace_hdl_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dtrace_printa_create(
        arg1: *mut dtrace_hdl_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dtrace_printf_format(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_char,
        arg4: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn dtrace_fprintf(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut FILE,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *const dtrace_probedata_t,
        arg5: *const dtrace_recdesc_t,
        arg6: uint_t,
        arg7: *const ::std::os::raw::c_void,
        arg8: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_fprinta(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut FILE,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *const dtrace_probedata_t,
        arg5: *const dtrace_recdesc_t,
        arg6: uint_t,
        arg7: *const ::std::os::raw::c_void,
        arg8: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_system(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut FILE,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *const dtrace_probedata_t,
        arg5: *const dtrace_recdesc_t,
        arg6: uint_t,
        arg7: *const ::std::os::raw::c_void,
        arg8: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_freopen(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut FILE,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *const dtrace_probedata_t,
        arg5: *const dtrace_recdesc_t,
        arg6: uint_t,
        arg7: *const ::std::os::raw::c_void,
        arg8: size_t,
    ) -> ::std::os::raw::c_int;
}
pub const dtrace_workstatus_t_DTRACE_WORKSTATUS_ERROR: dtrace_workstatus_t = -1;
pub const dtrace_workstatus_t_DTRACE_WORKSTATUS_OKAY: dtrace_workstatus_t = 0;
pub const dtrace_workstatus_t_DTRACE_WORKSTATUS_DONE: dtrace_workstatus_t = 1;
pub type dtrace_workstatus_t = ::std::os::raw::c_int;
extern "C" {
    pub fn dtrace_work(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut FILE,
        arg3: dtrace_consume_probe_f,
        arg4: dtrace_consume_rec_f,
        arg5: *mut ::std::os::raw::c_void,
    ) -> dtrace_workstatus_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_errdata {
    pub dteda_handle: *mut dtrace_hdl_t,
    pub dteda_edesc: *mut dtrace_eprobedesc_t,
    pub dteda_pdesc: *mut dtrace_probedesc_t,
    pub dteda_cpu: processorid_t,
    pub dteda_action: ::std::os::raw::c_int,
    pub dteda_offset: ::std::os::raw::c_int,
    pub dteda_fault: ::std::os::raw::c_int,
    pub dteda_addr: u64,
    pub dteda_msg: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_dtrace_errdata() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_errdata>(),
        56usize,
        concat!("Size of: ", stringify!(dtrace_errdata))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_errdata>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_errdata))
    );
    fn test_field_dteda_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_errdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dteda_handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_errdata),
                "::",
                stringify!(dteda_handle)
            )
        );
    }
    test_field_dteda_handle();
    fn test_field_dteda_edesc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_errdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dteda_edesc) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_errdata),
                "::",
                stringify!(dteda_edesc)
            )
        );
    }
    test_field_dteda_edesc();
    fn test_field_dteda_pdesc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_errdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dteda_pdesc) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_errdata),
                "::",
                stringify!(dteda_pdesc)
            )
        );
    }
    test_field_dteda_pdesc();
    fn test_field_dteda_cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_errdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dteda_cpu) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_errdata),
                "::",
                stringify!(dteda_cpu)
            )
        );
    }
    test_field_dteda_cpu();
    fn test_field_dteda_action() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_errdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dteda_action) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_errdata),
                "::",
                stringify!(dteda_action)
            )
        );
    }
    test_field_dteda_action();
    fn test_field_dteda_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_errdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dteda_offset) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_errdata),
                "::",
                stringify!(dteda_offset)
            )
        );
    }
    test_field_dteda_offset();
    fn test_field_dteda_fault() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_errdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dteda_fault) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_errdata),
                "::",
                stringify!(dteda_fault)
            )
        );
    }
    test_field_dteda_fault();
    fn test_field_dteda_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_errdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dteda_addr) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_errdata),
                "::",
                stringify!(dteda_addr)
            )
        );
    }
    test_field_dteda_addr();
    fn test_field_dteda_msg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_errdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dteda_msg) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_errdata),
                "::",
                stringify!(dteda_msg)
            )
        );
    }
    test_field_dteda_msg();
}
pub type dtrace_errdata_t = dtrace_errdata;
pub type dtrace_handle_err_f = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const dtrace_errdata_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn dtrace_handle_err(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_handle_err_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const dtrace_dropkind_t_DTRACEDROP_PRINCIPAL: dtrace_dropkind_t = 0;
pub const dtrace_dropkind_t_DTRACEDROP_AGGREGATION: dtrace_dropkind_t = 1;
pub const dtrace_dropkind_t_DTRACEDROP_DYNAMIC: dtrace_dropkind_t = 2;
pub const dtrace_dropkind_t_DTRACEDROP_DYNRINSE: dtrace_dropkind_t = 3;
pub const dtrace_dropkind_t_DTRACEDROP_DYNDIRTY: dtrace_dropkind_t = 4;
pub const dtrace_dropkind_t_DTRACEDROP_SPEC: dtrace_dropkind_t = 5;
pub const dtrace_dropkind_t_DTRACEDROP_SPECBUSY: dtrace_dropkind_t = 6;
pub const dtrace_dropkind_t_DTRACEDROP_SPECUNAVAIL: dtrace_dropkind_t = 7;
pub const dtrace_dropkind_t_DTRACEDROP_STKSTROVERFLOW: dtrace_dropkind_t = 8;
pub const dtrace_dropkind_t_DTRACEDROP_DBLERROR: dtrace_dropkind_t = 9;
pub type dtrace_dropkind_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_dropdata {
    pub dtdda_handle: *mut dtrace_hdl_t,
    pub dtdda_cpu: processorid_t,
    pub dtdda_kind: dtrace_dropkind_t,
    pub dtdda_drops: u64,
    pub dtdda_total: u64,
    pub dtdda_msg: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_dtrace_dropdata() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_dropdata>(),
        40usize,
        concat!("Size of: ", stringify!(dtrace_dropdata))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_dropdata>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_dropdata))
    );
    fn test_field_dtdda_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_dropdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdda_handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_dropdata),
                "::",
                stringify!(dtdda_handle)
            )
        );
    }
    test_field_dtdda_handle();
    fn test_field_dtdda_cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_dropdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdda_cpu) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_dropdata),
                "::",
                stringify!(dtdda_cpu)
            )
        );
    }
    test_field_dtdda_cpu();
    fn test_field_dtdda_kind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_dropdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdda_kind) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_dropdata),
                "::",
                stringify!(dtdda_kind)
            )
        );
    }
    test_field_dtdda_kind();
    fn test_field_dtdda_drops() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_dropdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdda_drops) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_dropdata),
                "::",
                stringify!(dtdda_drops)
            )
        );
    }
    test_field_dtdda_drops();
    fn test_field_dtdda_total() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_dropdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdda_total) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_dropdata),
                "::",
                stringify!(dtdda_total)
            )
        );
    }
    test_field_dtdda_total();
    fn test_field_dtdda_msg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_dropdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtdda_msg) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_dropdata),
                "::",
                stringify!(dtdda_msg)
            )
        );
    }
    test_field_dtdda_msg();
}
pub type dtrace_dropdata_t = dtrace_dropdata;
pub type dtrace_handle_drop_f = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const dtrace_dropdata_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn dtrace_handle_drop(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_handle_drop_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type dtrace_handle_proc_f = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ps_prochandle,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn dtrace_handle_proc(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_handle_proc_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_bufdata {
    pub dtbda_handle: *mut dtrace_hdl_t,
    pub dtbda_buffered: *const ::std::os::raw::c_char,
    pub dtbda_probe: *mut dtrace_probedata_t,
    pub dtbda_recdesc: *const dtrace_recdesc_t,
    pub dtbda_aggdata: *const dtrace_aggdata_t,
    pub dtbda_flags: u32,
}
#[test]
fn bindgen_test_layout_dtrace_bufdata() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_bufdata>(),
        48usize,
        concat!("Size of: ", stringify!(dtrace_bufdata))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_bufdata>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_bufdata))
    );
    fn test_field_dtbda_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_bufdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtbda_handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_bufdata),
                "::",
                stringify!(dtbda_handle)
            )
        );
    }
    test_field_dtbda_handle();
    fn test_field_dtbda_buffered() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_bufdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtbda_buffered) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_bufdata),
                "::",
                stringify!(dtbda_buffered)
            )
        );
    }
    test_field_dtbda_buffered();
    fn test_field_dtbda_probe() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_bufdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtbda_probe) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_bufdata),
                "::",
                stringify!(dtbda_probe)
            )
        );
    }
    test_field_dtbda_probe();
    fn test_field_dtbda_recdesc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_bufdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtbda_recdesc) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_bufdata),
                "::",
                stringify!(dtbda_recdesc)
            )
        );
    }
    test_field_dtbda_recdesc();
    fn test_field_dtbda_aggdata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_bufdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtbda_aggdata) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_bufdata),
                "::",
                stringify!(dtbda_aggdata)
            )
        );
    }
    test_field_dtbda_aggdata();
    fn test_field_dtbda_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_bufdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtbda_flags) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_bufdata),
                "::",
                stringify!(dtbda_flags)
            )
        );
    }
    test_field_dtbda_flags();
}
pub type dtrace_bufdata_t = dtrace_bufdata;
pub type dtrace_handle_buffered_f = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const dtrace_bufdata_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn dtrace_handle_buffered(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_handle_buffered_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_setoptdata {
    pub dtsda_handle: *mut dtrace_hdl_t,
    pub dtsda_probe: *const dtrace_probedata_t,
    pub dtsda_option: *const ::std::os::raw::c_char,
    pub dtsda_oldval: dtrace_optval_t,
    pub dtsda_newval: dtrace_optval_t,
}
#[test]
fn bindgen_test_layout_dtrace_setoptdata() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_setoptdata>(),
        40usize,
        concat!("Size of: ", stringify!(dtrace_setoptdata))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_setoptdata>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_setoptdata))
    );
    fn test_field_dtsda_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_setoptdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtsda_handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_setoptdata),
                "::",
                stringify!(dtsda_handle)
            )
        );
    }
    test_field_dtsda_handle();
    fn test_field_dtsda_probe() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_setoptdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtsda_probe) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_setoptdata),
                "::",
                stringify!(dtsda_probe)
            )
        );
    }
    test_field_dtsda_probe();
    fn test_field_dtsda_option() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_setoptdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtsda_option) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_setoptdata),
                "::",
                stringify!(dtsda_option)
            )
        );
    }
    test_field_dtsda_option();
    fn test_field_dtsda_oldval() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_setoptdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtsda_oldval) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_setoptdata),
                "::",
                stringify!(dtsda_oldval)
            )
        );
    }
    test_field_dtsda_oldval();
    fn test_field_dtsda_newval() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_setoptdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtsda_newval) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_setoptdata),
                "::",
                stringify!(dtsda_newval)
            )
        );
    }
    test_field_dtsda_newval();
}
pub type dtrace_setoptdata_t = dtrace_setoptdata;
pub type dtrace_handle_setopt_f = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const dtrace_setoptdata_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn dtrace_handle_setopt(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_handle_setopt_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_aggdata {
    pub dtada_handle: *mut dtrace_hdl_t,
    pub dtada_desc: *mut dtrace_aggdesc_t,
    pub dtada_edesc: *mut dtrace_eprobedesc_t,
    pub dtada_pdesc: *mut dtrace_probedesc_t,
    pub dtada_data: caddr_t,
    pub dtada_normal: u64,
    pub dtada_size: size_t,
    pub dtada_delta: caddr_t,
    pub dtada_percpu: *mut caddr_t,
    pub dtada_percpu_delta: *mut caddr_t,
}
#[test]
fn bindgen_test_layout_dtrace_aggdata() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_aggdata>(),
        80usize,
        concat!("Size of: ", stringify!(dtrace_aggdata))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_aggdata>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_aggdata))
    );
    fn test_field_dtada_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_aggdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtada_handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_aggdata),
                "::",
                stringify!(dtada_handle)
            )
        );
    }
    test_field_dtada_handle();
    fn test_field_dtada_desc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_aggdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtada_desc) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_aggdata),
                "::",
                stringify!(dtada_desc)
            )
        );
    }
    test_field_dtada_desc();
    fn test_field_dtada_edesc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_aggdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtada_edesc) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_aggdata),
                "::",
                stringify!(dtada_edesc)
            )
        );
    }
    test_field_dtada_edesc();
    fn test_field_dtada_pdesc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_aggdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtada_pdesc) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_aggdata),
                "::",
                stringify!(dtada_pdesc)
            )
        );
    }
    test_field_dtada_pdesc();
    fn test_field_dtada_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_aggdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtada_data) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_aggdata),
                "::",
                stringify!(dtada_data)
            )
        );
    }
    test_field_dtada_data();
    fn test_field_dtada_normal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_aggdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtada_normal) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_aggdata),
                "::",
                stringify!(dtada_normal)
            )
        );
    }
    test_field_dtada_normal();
    fn test_field_dtada_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_aggdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtada_size) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_aggdata),
                "::",
                stringify!(dtada_size)
            )
        );
    }
    test_field_dtada_size();
    fn test_field_dtada_delta() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_aggdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtada_delta) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_aggdata),
                "::",
                stringify!(dtada_delta)
            )
        );
    }
    test_field_dtada_delta();
    fn test_field_dtada_percpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_aggdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtada_percpu) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_aggdata),
                "::",
                stringify!(dtada_percpu)
            )
        );
    }
    test_field_dtada_percpu();
    fn test_field_dtada_percpu_delta() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_aggdata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtada_percpu_delta) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_aggdata),
                "::",
                stringify!(dtada_percpu_delta)
            )
        );
    }
    test_field_dtada_percpu_delta();
}
pub type dtrace_aggregate_f = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const dtrace_aggdata_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type dtrace_aggregate_walk_f = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_aggregate_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type dtrace_aggregate_walk_joined_f = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut *const dtrace_aggdata_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn dtrace_aggregate_clear(arg1: *mut dtrace_hdl_t);
}
extern "C" {
    pub fn dtrace_aggregate_snap(arg1: *mut dtrace_hdl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_aggregate_print(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut FILE,
        arg3: dtrace_aggregate_walk_f,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_aggregate_walk(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_aggregate_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_aggregate_walk_joined(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut dtrace_aggvarid_t,
        arg3: ::std::os::raw::c_int,
        arg4: dtrace_aggregate_walk_joined_f,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_aggregate_walk_sorted(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_aggregate_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_aggregate_walk_keysorted(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_aggregate_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_aggregate_walk_valsorted(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_aggregate_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_aggregate_walk_keyvarsorted(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_aggregate_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_aggregate_walk_valvarsorted(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_aggregate_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_aggregate_walk_keyrevsorted(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_aggregate_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_aggregate_walk_valrevsorted(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_aggregate_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_aggregate_walk_keyvarrevsorted(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_aggregate_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_aggregate_walk_valvarrevsorted(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_aggregate_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_proc_create(
        arg1: *mut dtrace_hdl_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const *mut ::std::os::raw::c_char,
    ) -> *mut ps_prochandle;
}
extern "C" {
    pub fn dtrace_proc_grab(
        arg1: *mut dtrace_hdl_t,
        arg2: pid_t,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ps_prochandle;
}
extern "C" {
    pub fn dtrace_proc_release(arg1: *mut dtrace_hdl_t, arg2: *mut ps_prochandle);
}
extern "C" {
    pub fn dtrace_proc_continue(arg1: *mut dtrace_hdl_t, arg2: *mut ps_prochandle);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_objinfo {
    pub dto_name: *const ::std::os::raw::c_char,
    pub dto_file: *const ::std::os::raw::c_char,
    pub dto_id: ::std::os::raw::c_int,
    pub dto_flags: uint_t,
    pub dto_text_va: __GElf_Addr,
    pub dto_text_size: __GElf_Xword,
    pub dto_data_va: __GElf_Addr,
    pub dto_data_size: __GElf_Xword,
    pub dto_bss_va: __GElf_Addr,
    pub dto_bss_size: __GElf_Xword,
}
#[test]
fn bindgen_test_layout_dtrace_objinfo() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_objinfo>(),
        72usize,
        concat!("Size of: ", stringify!(dtrace_objinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_objinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_objinfo))
    );
    fn test_field_dto_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_objinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dto_name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_objinfo),
                "::",
                stringify!(dto_name)
            )
        );
    }
    test_field_dto_name();
    fn test_field_dto_file() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_objinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dto_file) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_objinfo),
                "::",
                stringify!(dto_file)
            )
        );
    }
    test_field_dto_file();
    fn test_field_dto_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_objinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dto_id) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_objinfo),
                "::",
                stringify!(dto_id)
            )
        );
    }
    test_field_dto_id();
    fn test_field_dto_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_objinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dto_flags) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_objinfo),
                "::",
                stringify!(dto_flags)
            )
        );
    }
    test_field_dto_flags();
    fn test_field_dto_text_va() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_objinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dto_text_va) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_objinfo),
                "::",
                stringify!(dto_text_va)
            )
        );
    }
    test_field_dto_text_va();
    fn test_field_dto_text_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_objinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dto_text_size) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_objinfo),
                "::",
                stringify!(dto_text_size)
            )
        );
    }
    test_field_dto_text_size();
    fn test_field_dto_data_va() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_objinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dto_data_va) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_objinfo),
                "::",
                stringify!(dto_data_va)
            )
        );
    }
    test_field_dto_data_va();
    fn test_field_dto_data_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_objinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dto_data_size) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_objinfo),
                "::",
                stringify!(dto_data_size)
            )
        );
    }
    test_field_dto_data_size();
    fn test_field_dto_bss_va() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_objinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dto_bss_va) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_objinfo),
                "::",
                stringify!(dto_bss_va)
            )
        );
    }
    test_field_dto_bss_va();
    fn test_field_dto_bss_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_objinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dto_bss_size) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_objinfo),
                "::",
                stringify!(dto_bss_size)
            )
        );
    }
    test_field_dto_bss_size();
}
pub type dtrace_objinfo_t = dtrace_objinfo;
pub type dtrace_obj_f = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut dtrace_hdl_t,
        arg2: *const dtrace_objinfo_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn dtrace_object_iter(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_obj_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_object_info(
        arg1: *mut dtrace_hdl_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut dtrace_objinfo_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_syminfo {
    pub dts_object: *const ::std::os::raw::c_char,
    pub dts_name: *const ::std::os::raw::c_char,
    pub dts_id: ulong_t,
}
#[test]
fn bindgen_test_layout_dtrace_syminfo() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_syminfo>(),
        24usize,
        concat!("Size of: ", stringify!(dtrace_syminfo))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_syminfo>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_syminfo))
    );
    fn test_field_dts_object() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_syminfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dts_object) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_syminfo),
                "::",
                stringify!(dts_object)
            )
        );
    }
    test_field_dts_object();
    fn test_field_dts_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_syminfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dts_name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_syminfo),
                "::",
                stringify!(dts_name)
            )
        );
    }
    test_field_dts_name();
    fn test_field_dts_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_syminfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dts_id) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_syminfo),
                "::",
                stringify!(dts_id)
            )
        );
    }
    test_field_dts_id();
}
pub type dtrace_syminfo_t = dtrace_syminfo;
extern "C" {
    pub fn dtrace_lookup_by_name(
        arg1: *mut dtrace_hdl_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __GElf_Sym,
        arg5: *mut dtrace_syminfo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_lookup_by_addr(
        arg1: *mut dtrace_hdl_t,
        addr: __GElf_Addr,
        arg2: *mut __GElf_Sym,
        arg3: *mut dtrace_syminfo_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_typeinfo {
    pub dtt_object: *const ::std::os::raw::c_char,
    pub dtt_ctfp: *mut ctf_file_t,
    pub dtt_type: ctf_id_t,
}
#[test]
fn bindgen_test_layout_dtrace_typeinfo() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_typeinfo>(),
        24usize,
        concat!("Size of: ", stringify!(dtrace_typeinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_typeinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_typeinfo))
    );
    fn test_field_dtt_object() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_typeinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtt_object) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_typeinfo),
                "::",
                stringify!(dtt_object)
            )
        );
    }
    test_field_dtt_object();
    fn test_field_dtt_ctfp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_typeinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtt_ctfp) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_typeinfo),
                "::",
                stringify!(dtt_ctfp)
            )
        );
    }
    test_field_dtt_ctfp();
    fn test_field_dtt_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_typeinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtt_type) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_typeinfo),
                "::",
                stringify!(dtt_type)
            )
        );
    }
    test_field_dtt_type();
}
pub type dtrace_typeinfo_t = dtrace_typeinfo;
extern "C" {
    pub fn dtrace_lookup_by_type(
        arg1: *mut dtrace_hdl_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut dtrace_typeinfo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_symbol_type(
        arg1: *mut dtrace_hdl_t,
        arg2: *const __GElf_Sym,
        arg3: *const dtrace_syminfo_t,
        arg4: *mut dtrace_typeinfo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_type_strcompile(
        arg1: *mut dtrace_hdl_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut dtrace_typeinfo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_type_fcompile(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut FILE,
        arg3: *mut dtrace_typeinfo_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_probeinfo {
    pub dtp_attr: dtrace_attribute_t,
    pub dtp_arga: dtrace_attribute_t,
    pub dtp_argv: *const dtrace_typeinfo_t,
    pub dtp_argc: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_dtrace_probeinfo() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_probeinfo>(),
        24usize,
        concat!("Size of: ", stringify!(dtrace_probeinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_probeinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_probeinfo))
    );
    fn test_field_dtp_attr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_probeinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtp_attr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_probeinfo),
                "::",
                stringify!(dtp_attr)
            )
        );
    }
    test_field_dtp_attr();
    fn test_field_dtp_arga() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_probeinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtp_arga) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_probeinfo),
                "::",
                stringify!(dtp_arga)
            )
        );
    }
    test_field_dtp_arga();
    fn test_field_dtp_argv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_probeinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtp_argv) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_probeinfo),
                "::",
                stringify!(dtp_argv)
            )
        );
    }
    test_field_dtp_argv();
    fn test_field_dtp_argc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_probeinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtp_argc) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_probeinfo),
                "::",
                stringify!(dtp_argc)
            )
        );
    }
    test_field_dtp_argc();
}
pub type dtrace_probeinfo_t = dtrace_probeinfo;
pub type dtrace_probe_f = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut dtrace_hdl_t,
        arg2: *const dtrace_probedesc_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn dtrace_probe_iter(
        arg1: *mut dtrace_hdl_t,
        pdp: *const dtrace_probedesc_t,
        arg2: dtrace_probe_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_probe_info(
        arg1: *mut dtrace_hdl_t,
        arg2: *const dtrace_probedesc_t,
        arg3: *mut dtrace_probeinfo_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtrace_vector {
    pub dtv_ioctl: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub dtv_lookup_by_addr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: __GElf_Addr,
            arg3: *mut __GElf_Sym,
            arg4: *mut dtrace_syminfo_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub dtv_status: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: processorid_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub dtv_sysconf: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
    >,
}
#[test]
fn bindgen_test_layout_dtrace_vector() {
    assert_eq!(
        ::std::mem::size_of::<dtrace_vector>(),
        32usize,
        concat!("Size of: ", stringify!(dtrace_vector))
    );
    assert_eq!(
        ::std::mem::align_of::<dtrace_vector>(),
        8usize,
        concat!("Alignment of ", stringify!(dtrace_vector))
    );
    fn test_field_dtv_ioctl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_vector>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtv_ioctl) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_vector),
                "::",
                stringify!(dtv_ioctl)
            )
        );
    }
    test_field_dtv_ioctl();
    fn test_field_dtv_lookup_by_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_vector>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtv_lookup_by_addr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_vector),
                "::",
                stringify!(dtv_lookup_by_addr)
            )
        );
    }
    test_field_dtv_lookup_by_addr();
    fn test_field_dtv_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_vector>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtv_status) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_vector),
                "::",
                stringify!(dtv_status)
            )
        );
    }
    test_field_dtv_status();
    fn test_field_dtv_sysconf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<dtrace_vector>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtv_sysconf) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(dtrace_vector),
                "::",
                stringify!(dtv_sysconf)
            )
        );
    }
    test_field_dtv_sysconf();
}
extern "C" {
    pub fn dtrace_addr2str(
        arg1: *mut dtrace_hdl_t,
        arg2: u64,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_uaddr2str(
        arg1: *mut dtrace_hdl_t,
        arg2: pid_t,
        arg3: u64,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_xstr2desc(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_probespec_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: *const *mut ::std::os::raw::c_char,
        arg6: *mut dtrace_probedesc_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_str2desc(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_probespec_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut dtrace_probedesc_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_id2desc(
        arg1: *mut dtrace_hdl_t,
        arg2: dtrace_id_t,
        arg3: *mut dtrace_probedesc_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_desc2str(
        arg1: *const dtrace_probedesc_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dtrace_attr2str(
        arg1: dtrace_attribute_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dtrace_str2attr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut dtrace_attribute_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtrace_stability_name(arg1: dtrace_stability_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dtrace_class_name(arg1: dtrace_class_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dtrace_provider_modules(
        arg1: *mut dtrace_hdl_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static _dtrace_version: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut _dtrace_debug: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut _dtrace_scanalzyer: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut _dtrace_mangled: ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    fn test_field_gp_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(gp_offset)
            )
        );
    }
    test_field_gp_offset();
    fn test_field_fp_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(fp_offset)
            )
        );
    }
    test_field_fp_offset();
    fn test_field_overflow_arg_area() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(overflow_arg_area)
            )
        );
    }
    test_field_overflow_arg_area();
    fn test_field_reg_save_area() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(reg_save_area)
            )
        );
    }
    test_field_reg_save_area();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dt_node {
    pub _address: u8,
}
